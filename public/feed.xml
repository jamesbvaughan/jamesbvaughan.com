<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>things james does</title>
    <link>https://jamesbvaughan.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://jamesbvaughan.com/feed.xml" />
    <description>James Vaughan's recent blog posts</description>
    <language>en-us</language>
    <managingEditor>
      james@jamesbvaughan.com (James Vaughan)
    </managingEditor>
    <webMaster>
      james@jamesbvaughan.com (James Vaughan)
    </webMaster>
    <lastBuildDate>
      Wed, 22 Aug 2018 00:00:00 +0000
    </lastBuildDate>
    
      <item>
        <title>Movie Director Genders</title>
        <link>https://jamesbvaughan.com/movie-director-genders/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/movie-director-genders/</guid>
        <pubDate>
          Wed, 22 Aug 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I&amp;rsquo;ve always loved watching movies.
This started way back when I was in elementary school and my dad designated the
largest room in our house as the movie watching room, to be used strictly for
watching movies.
Since then, movie watching has remained my favorite form of passive
entertainment.&lt;/p&gt;

&lt;p&gt;I signed up for &lt;a href=&#34;https://moviepass.com/&#34;&gt;MoviePass&lt;/a&gt; a while back,
which has led to me watching movies &lt;em&gt;way&lt;/em&gt; more frequently than I used to.
I also started using &lt;a href=&#34;https://letterboxd.com/&#34;&gt;Letterboxd&lt;/a&gt; around the same time,
and it has quickly become one of my favorite websites.
I&amp;rsquo;ve added nearly every movie I&amp;rsquo;ve ever seen to my profile on it,
and it has replaced both Wikipedia and IMDB for me as my go-to site for looking
up basic info about a movie, an actor, or a director.&lt;/p&gt;

&lt;p&gt;Lately I&amp;rsquo;ve become increasingly aware of how few women I see when I&amp;rsquo;m browsing
directors of movies that I&amp;rsquo;ve watched.
The gender disparity in Hollywood is nothing new,
and people have been talking about it for a long time now.
I realized that, despite knowing about it,
I had never &lt;em&gt;really&lt;/em&gt; thought about how it relates to
what movies I choose to see or how I perceive the movies that I see,
so I decided to take a look at my personal movie-watching history and see what
the gender breakdown is in the directors whose movies I&amp;rsquo;ve watched.&lt;/p&gt;

&lt;p&gt;In this post,
I will go through the basics of the ruby script that I wrote to do this
and I will write about what I learned from it.
(If you&amp;rsquo;re interested in what I learned, but not in the technical details,
you can &lt;a href=&#34;#results&#34;&gt;skip to the end&lt;/a&gt;. Don&amp;rsquo;t worry, I won&amp;rsquo;t be offended.)&lt;/p&gt;

&lt;h1 id=&#34;collecting-the-data&#34;&gt;Collecting the Data&lt;/h1&gt;

&lt;p&gt;Fortunately for me, since I joined Letterboxd,
I&amp;rsquo;ve been logging every single movie that I watch on it,
so making a list wasn&amp;rsquo;t a difficult task.
I could have gone through this list by hand
and written down the gender of each director,
but I decided to have a little more fun with
it and write a script that does that for me.&lt;/p&gt;

&lt;h2 id=&#34;getting-my-movie-diary-from-letterboxd&#34;&gt;Getting My Movie Diary from Letterboxd&lt;/h2&gt;

&lt;p&gt;Letterboxd doesn&amp;rsquo;t have a public API available yet,
but they do let you download all of your personal data as CSVs.
One of these CSVs is a file called &lt;code&gt;watched.csv&lt;/code&gt; that includes a row for every
movie that I have ever marked watched.
After getting that file, I used Ruby&amp;rsquo;s CSV class to parse it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;men&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;women&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;CSV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;watched.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;women&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; women, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;men&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; men&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to find out what to do with it&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;finding-metadata-for-each-movie&#34;&gt;Finding Metadata for each Movie&lt;/h2&gt;

&lt;p&gt;Each of the rows in &lt;code&gt;watched.csv&lt;/code&gt; contains a bit of metadata about a movie that
I have logged, including the url for the movie&amp;rsquo;s Letterboxd page,
but no info about the director, so I knew I would have to do a bit of
scraping to find the directors and their genders.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&#34;https://github.com/httprb/http&#34;&gt;http.rb&lt;/a&gt; to fetch the pages I needed
and used &lt;a href=&#34;http://www.nokogiri.org/&#34;&gt;nokogiri&lt;/a&gt; to parse and search them.&lt;/p&gt;

&lt;p&gt;Letterboxd gets its movie data from &lt;a href=&#34;https://www.themoviedb.org/&#34;&gt;TMDB&lt;/a&gt;,
a community built movie database.&lt;/p&gt;

&lt;p&gt;Fortunately, the Letterboxd devs use
&lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_Web&#34;&gt;semantic web&lt;/a&gt; techniques in their
markup, so finding each movie&amp;rsquo;s TMDB ID was not difficult.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;letterboxd_movie_doc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Nokogiri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letterboxd_movie_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tmdb_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letterboxd_movie_doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at_xpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/html/body/@data-tmdb-id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;determining-the-genders&#34;&gt;Determining the Genders&lt;/h2&gt;

&lt;p&gt;Once I had the TMDB IDs,
I used the TMDB API to get the credits for each movie,
which consist of a bit of data about each person in the movie&amp;rsquo;s cast and crew,
including their gender, as listed on TMDB.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;tmdb_movie_credits_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.themoviedb.org/3/movie/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_id&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;
                         &lt;span class=&#34;s2&#34;&gt;&amp;#34;/credits?api_key=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;TMDB_API_KEY&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;movie_credits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_movie_credits_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Woohoo we have the director info that we need!
&lt;code&gt;movie_credits[&#39;crew&#39;]&lt;/code&gt; is an array with an object for each crew member
that contains basic info about them.&lt;/p&gt;

&lt;p&gt;At this point I thought I was pretty much finished.
I just had to filter out the directors from the rest of the crew and add
up the gender counts.&lt;/p&gt;

&lt;p&gt;TMDB seemed to be using integers to represent the genders,
with 1 representing female and 2 representing male,
but I was slowed down a bit when a bunch of movie directors came back as
0: neither female nor male.
What did 0 mean? Was TMDB being progressive and providing more than two gender
options?
No, it was just that their data is all crowdsourced and a 0 simply means that
no one has added a gender for that person yet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;movie_credits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;crew&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Director&amp;#39;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;women&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;men&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;tmdb_person_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.themoviedb.org/person/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Unknown gender: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, edit here: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_person_url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first I thought I&amp;rsquo;d just manually look up all the unknown directors and add
up the numbers myself, but then it hit me that that would be a bit wasteful
given that TMDB is crowdsourced and I could just update the data there
directly!
I added that url to the else clause of the case statement so that I could
easily reach the TMDB page for each director that my script ran into who
didn&amp;rsquo;t have a gender listed on TMDB.&lt;/p&gt;

&lt;p&gt;Adding genders for those directors turned out to be really simple and took just
a few minutes of browsing TMDB, cross-referencing with other sources,
and submitting the relevant updates.
Now I had a more sustainable solution, which will hopefully help out future
TMDB users as well.&lt;/p&gt;

&lt;h2 id=&#34;adding-it-up&#34;&gt;Adding It Up&lt;/h2&gt;

&lt;p&gt;The final step was to add up the numbers and check the results.
Here is the full code (minus a bit of error handling):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dotenv/load&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;csv&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;men&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;women&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;CSV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;watched.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;letterboxd_movie_doc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Nokogiri&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;tmdb_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letterboxd_movie_doc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at_xpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/html/body/@data-tmdb-id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;tmdb_movie_credits_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.themoviedb.org/3/movie/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_id&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;
                           &lt;span class=&#34;s2&#34;&gt;&amp;#34;/credits?api_key=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;TMDB_API_KEY&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;movie_credits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_movie_credits_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;movie_credits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;crew&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Director&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;gender&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;women&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;men&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;tmdb_person_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.themoviedb.org/person/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Unknown gender: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;credit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, edit here: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmdb_person_url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;women&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; women, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;men&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; men&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;

&lt;p&gt;It turned out that as of this writing,
among all of the directors for the 720 movies that I have
marked watched on Letterboxd, &lt;strong&gt;788 were men, and only 39 were women&lt;/strong&gt;.
(Many movies, especially old childrens&amp;rsquo; movies,
had more than one director listed.)&lt;/p&gt;

&lt;h1 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;I wish I could say that those results came as a surprise to me,
but to be honest I was expecting about that level of imbalance.
I have known for as long as I can remember that most directors I watch are men,
but that has only recently started to feel strange to me.
I am not, to my knowledge, avoiding movies that are directed by women.
It seems that there are just a lot fewer big movies directed by women out there
to choose from.&lt;/p&gt;

&lt;p&gt;If that really is the case, then why is it?
I am not qualified to speculate about that, but I do feel confident that
striving for a more equal balance in directors would lead to a more interesting,
more varied, and overall better selection of movies for audiences to choose
from.
I believe that one way we can work toward that is by supporting female-directed
movies, and showing Hollywood that people really want them.&lt;/p&gt;

&lt;p&gt;Personally, I am going to try to change my watching habits over the next year
and make a point of exposing myself to more female-directed movies.
My specific goal is for at least &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the movies that I watch over the next
year to be directed by women.
I don&amp;rsquo;t think that my doing this is going to change Hollywood,
but I do think that I will expose myself to a broader range of perspectives in
movies that I probably wouldn&amp;rsquo;t be exposed to otherwise,
and will hopefully discover some new favorite filmmakers along the way.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is my first post touching on a current social issue,
and all opinions expressed here are my own,
but I am very much open to feedback on my choice of wording and my thought
process.
If you have any comments or questions related to all this,
technical or non-technical, please let me know!&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jamesbvaughan/gender-breakdowns&#34;&gt;The full code for this on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://letterboxd.com/jamesbvaughan&#34;&gt;My Profile on Letterboxd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While writing this, I read up on the issue and found some articles that are
worth checking out if you are interested in this topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.huffingtonpost.com/susanna-white/why-are-there-so-few-wome_2_b_9901980.html&#34;&gt;Why Are There So Few Women Directors (Huffington Post)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://filmonomics.slated.com/gender-justice-70f1dccfeb8&#34;&gt;Gender Justice (Slated)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://variety.com/2017/film/news/female-directors-hollywood-diversity-1201958694/&#34;&gt;Number of Female Directors Falls Despite Diversity Debate, Says Study (Variety)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/film/2010/jan/31/female-film-makers&#34;&gt;Why Are There So Few Female Filmmakers (The Guardian)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>How I Take Notes With Vim, Markdown, and Pandoc</title>
        <link>https://jamesbvaughan.com/markdown-pandoc-notes/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/markdown-pandoc-notes/</guid>
        <pubDate>
          Tue, 15 May 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I&amp;rsquo;ve gone through quite a few revisions of my note-taking process
and now that I&amp;rsquo;m in my final year of school,
I think I&amp;rsquo;ve finally found a system that I&amp;rsquo;m going to stick with.
In this post, I will describe this system and explain why I like it so much.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: I write notes in Markdown with Vim and Vimwiki on my computer
and with Markor on my phone,
keep them in sync with Syncthing,
and view them as web pages and PDFs that I generate with pandoc.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering what things I&amp;rsquo;m taking notes on that are important
enough to warrant a whole post on how I take them.
Right now, the main thing is lectures for classes,
but I also take notes on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;books that I read&lt;/li&gt;
&lt;li&gt;movies that I watch&lt;/li&gt;
&lt;li&gt;important conversations&lt;/li&gt;
&lt;li&gt;interesting things that I learn about people&lt;/li&gt;
&lt;li&gt;projects that I am work on&lt;/li&gt;
&lt;li&gt;recipes&lt;/li&gt;
&lt;li&gt;ideas for future blog posts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;my-note-taking-history&#34;&gt;My Note-Taking History&lt;/h2&gt;

&lt;p&gt;For some context,
in addition to taking notes with the method I describe in this post,
I have tried taking notes
with pen and paper,
with Google Docs,
with &lt;a href=&#34;https://evernote.com/&#34;&gt;Evernote&lt;/a&gt;,
and
with &lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of these methods, I stuck with pen and paper the longest.
I still like taking handwritten notes, but for most use cases
I value the ability to search through and format my notes
on my computer over the extra expressiveness of handwritten notes.&lt;/p&gt;

&lt;p&gt;Evernote and Simplenote are great tools and I would recommend them for most
people, but I personally prefer to keep my notes in simple files
on my filesystem that I can organize, modify, and parse however I want to.&lt;/p&gt;

&lt;h2 id=&#34;how-i-settled-on-this-system&#34;&gt;How I Settled On This System&lt;/h2&gt;

&lt;p&gt;One problem that I&amp;rsquo;ve had with digital note-taking tools and apps is that
they&amp;rsquo;re not Vim.
This might sound like a joke, but once you start using
Vim regularly, you can begin to feel handicapped without it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For those who don&amp;rsquo;t know what Vim is,
it&amp;rsquo;s a text editor that encourages a completely mouse-free workflow.
It has an
extensive and elegant system of composable keybindings that enable users to
perform complex editing tasks with minimal hand movement.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vim is not a &lt;a href=&#34;https://en.wikipedia.org/wiki/WYSIWYG&#34;&gt;WYSIWYG&lt;/a&gt;
editor, but I like using nice formatting features,
like
headings,
lists,
tables,
and pretty math,
so I needed to pick a markup language.
At first I thought I might use
&lt;a href=&#34;https://www.latex-project.org//&#34;&gt;LaTeX&lt;/a&gt;
because I was familiar with it and
it has nice default styles,
but ended up going with Markdown after discovering
&lt;a href=&#34;http://pandoc.org/&#34;&gt;pandoc&lt;/a&gt;,
and learning that I could write documents in simple Markdown and
then use it to convert them
to LaTeX-formatted PDFs, HTML pages, and a bunch of other formats.&lt;/p&gt;

&lt;h2 id=&#34;organization&#34;&gt;Organization&lt;/h2&gt;

&lt;p&gt;I keep most of my notes in &lt;code&gt;~/Documents/notes&lt;/code&gt;,
under subdirectories for different topics or types of notes.
For example, the notes for my computer security class are in
&lt;code&gt;~/Documents/notes/school/cs136&lt;/code&gt;.
Within individual notes, I link to others with standard Markdown link syntax,
and can quickly navigate to them by placing my cursor over the link I want
to navigate to and pressing Enter, thanks to the
&lt;a href=&#34;http://vimwiki.github.io/&#34;&gt;Vimwiki&lt;/a&gt; plugin.&lt;/p&gt;

&lt;h2 id=&#34;viewing&#34;&gt;Viewing&lt;/h2&gt;

&lt;p&gt;When I need to read my notes,
whether it&amp;rsquo;s just for a quick reference
or to study for a big exam,
I have a few different methods set up.&lt;/p&gt;

&lt;h4 id=&#34;in-vim&#34;&gt;In Vim&lt;/h4&gt;

&lt;p&gt;Vimwiki makes it really easy to navigate through a bunch of Markdown notes.
I have an &lt;code&gt;index.md&lt;/code&gt; that looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;title: My Knowledge Base&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;subtitle:&lt;span class=&#34;k&#34;&gt; &amp;gt;
&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;  This is a collection of things that I know,
&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt;&lt;/span&gt;  things that I learn,&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  and things that I want to remember.&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;##&lt;/span&gt; School

&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Computer Science&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;school/computer-science&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Math&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;school/math&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Physics&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;school/physics&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;##&lt;/span&gt; Technologies
&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;Tips and tricks on different applications and technologies that&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;I&amp;#39;ve found myself needing to look up more than once.&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;####&lt;/span&gt; Languages

&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Go&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/go&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Python&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/python&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;####&lt;/span&gt; Tools

&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Postgres&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/postgres&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;MySQL&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/mysql&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;SSH&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/open-ssh&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Git&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/git&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;####&lt;/span&gt; Other

&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Linux Audio&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/linux-audio&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Progressive Web Apps&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/pwas&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Machine Learning&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;technologies/machine-learning&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;##&lt;/span&gt; Misc

&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Favorite Film Moments&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;film-moments&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Recipes&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;recipes/index&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Project Ideas&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;projects/ideas&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Blog Post Ideas&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;blog-post-ideas&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Music to Listen To&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;music-to-listen-to&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;Book Notes&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;books/index&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; [&lt;span class=&#34;nt&#34;&gt;People&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;people/index&lt;/span&gt;)&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;- [&lt;span class=&#34;nt&#34;&gt;Quotes I Like&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;quotes&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file links to all my different categories of notes and
is a nice &amp;ldquo;home base&amp;rdquo; for them.
It also makes for a nice homepage when I convert the notes to a static
website.&lt;/p&gt;

&lt;h4 id=&#34;on-the-web&#34;&gt;On The Web&lt;/h4&gt;

&lt;p&gt;For quick things, the most common way I look at notes is actually with a web
browser.
I have a Makefile that converts all of my Markdown notes to HTML using
pandoc and deploys them to my server where they&amp;rsquo;re served behind HTTP auth.
The Makefile looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MD_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;shell find . -name &lt;span class=&#34;se&#34;&gt;\*&lt;/span&gt;.md&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;HTML_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MD_FILES:.md&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.html&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BUILD_HTML_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;HTML_FILES:%&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;build/%&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BUILD_HTML_FILES&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;build/assets/%&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assets&lt;/span&gt;/%
        @mkdir -p &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        cp &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;build/%.html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; %.&lt;span class=&#34;n&#34;&gt;md&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;
	@mkdir -p &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	pandoc -o &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; --template&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;template.html $&amp;lt;

&lt;span class=&#34;nf&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        rsync --recursive --human-readable --delete --info&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;progress2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;               build/* my_server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right now I&amp;rsquo;m running this manually after I make changes to my notes that I
want to deploy but I might automate it in the future.&lt;/p&gt;

&lt;h4 id=&#34;on-my-phone&#34;&gt;On My Phone&lt;/h4&gt;

&lt;p&gt;I use
&lt;a href=&#34;https://syncthing.net/&#34;&gt;Syncthing&lt;/a&gt;
to keep my notes directory in sync between my machines and my phone.
I also use the
&lt;a href=&#34;https://github.com/gsantner/markor&#34;&gt;Markor&lt;/a&gt;
app to manage and edit the notes on my phone.
This app is nice because it makes it easy to navigate my notes
directory and the built in editor formats Markdown files nicely.&lt;/p&gt;

&lt;h3 id=&#34;in-print&#34;&gt;In Print&lt;/h3&gt;

&lt;p&gt;When I have a big exam coming up,
it sometimes helps to make a PDF of all my notes to study off of.
For this, I&amp;rsquo;ve created Makefiles for specific classes that produce a nice
looking PDF of all my notes for the class.
For example, this is my Makefile for a software engineering class I&amp;rsquo;m taking
right now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Makefile&#34; data-lang=&#34;Makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MD_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;about.md &lt;span class=&#34;m&#34;&gt;130&lt;/span&gt;-final-notes.md general-advice.md requirements.md &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         software-processes.md modeling.md architectural-design.md &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         design-of-components.md software-quality.md &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         configuration-management.md testing.md week-2-discussion.md &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;         week-3-discussion.md week-4-discussion.md
&lt;span class=&#34;nv&#34;&gt;PDF_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MD_FILES:.md&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.pdf&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BUILD_PDF_FILES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PDF_FILES:%&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;build/%&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;EXTRA_PDFS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sample-midterm-solutions.pdf

&lt;span class=&#34;nf&#34;&gt;130.pdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BUILD_PDF_FILES&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
        gs -sDEVICE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pdfwrite -dCompatibilityLevel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.4 -dPDFSETTINGS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;                -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages
                -dCompressFonts&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; -r150 -sOutputFile&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; $^ &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;EXTRA_PDFS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;build/%.pdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; %.&lt;span class=&#34;n&#34;&gt;md&lt;/span&gt;
        @mkdir -p &lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dirname &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        pandoc -V geometry:margin&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1in -o &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This converts each file to a PDF and then uses
&lt;a href=&#34;https://www.ghostscript.com/&#34;&gt;Ghostscript&lt;/a&gt;
to combine them all into one.
It also lets me include any other PDFs I have, like the sample midterm in
my example.
This has been super handy for open-note tests.&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;I like this system a lot but it&amp;rsquo;s not perfect.&lt;/p&gt;

&lt;p&gt;One issue with it is that I have a lot of fun tweaking and &amp;ldquo;optimizing&amp;rdquo;
my Vim configuration and note taking process.
I put &amp;ldquo;optimizing&amp;rdquo; in quotes because this often ends up taking more of my
time than the &amp;ldquo;optimizations&amp;rdquo; actually save,
and I&amp;rsquo;ll commonly miss chunks of lectures because I got distracted trying
to fix the syntax highlighting for misspelled words in my Vim colorscheme
or trying to decide on a better font size for the headers in my generated
PDFs.&lt;/p&gt;

&lt;p&gt;Another area with room for improvement is in my use of the Vimwiki plugin.
It&amp;rsquo;s a powerful plugin with a bunch of cool features, but
the only one I&amp;rsquo;m really using right now is the ability to navigate to linked
documents.
I think that my process could be improved by either using a more minimal
plugin that includes only that feature or by starting to take advantage of
more of Vimwiki&amp;rsquo;s features.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Jay Kamat</title>
        <link>https://jamesbvaughan.com/jay-kamat/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/jay-kamat/</guid>
        <pubDate>
          Tue, 08 May 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;This week&amp;rsquo;s interview features Jay Kamat
(&lt;a href=&#34;https://github.com/jgkamat&#34;&gt;jgkamat&lt;/a&gt;),
a Computer Science student at Georgia Tech.
I first found Jay through his work on &lt;a href=&#34;https://jamesbvaughan.com/qutebrowser&#34;&gt;qutebrowser&lt;/a&gt;
and was impressed with how much work he had done on the browser and
with how welcoming and helpful he was in the Github issues and on IRC.
When I found out that he is the same age as me,
I thought he would be a perfect person to feature in this series.&lt;/p&gt;

&lt;h2 id=&#34;interview&#34;&gt;Interview&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Friday, April 13, 2018.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;James: Your first activity on Github was back in 2014, but
when did you first get started coding?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I actually started programming in high school.
We had two classes at my school:
intro to Computer Science and AP Computer Science.
I took those two classes and they were my very first introduction
to programming.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;After that, I actually applied to college for aerospace engineering.
I wasn&amp;rsquo;t really sure what I wanted to do at that point,
but at my orientation I talked with a bunch
of computer science students and I really liked what they were doing,
so I switched to CS immediately.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you originally get involved in open source?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;This is kind of a complex answer because I didn&amp;rsquo;t start contributing to
open source until fairly recently.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I&amp;rsquo;ve only contributed to open source in college,
but I was enthusiastic about open source before college.
In high school I was trying to switch over to using all open source
applications,
and that turned out to be really helpful because now that I use
mostly open source software I can pretty much change anything that I want.
It&amp;rsquo;s really liberating.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Early in college, I joined a club called
&lt;a href=&#34;https://robojackets.org/&#34;&gt;RoboJackets&lt;/a&gt;,
which had a robotics team.
Their software is open source, so all of their development happens in the open,
and that became the first major open source project that I contributed to.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;After that, I started to make tiny little contributions all over the place.
I didn&amp;rsquo;t really have a single project that I contributed to until I
started contributing to qutebrowser,
which I&amp;rsquo;ve now contributed quite a lot to.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I didn&amp;rsquo;t expect to become a top contributor to it.
I don&amp;rsquo;t sit down and think,
&amp;ldquo;Oh, I&amp;rsquo;m going to to contribute to qutebrowser today.&amp;rdquo;
I usually think,
&amp;ldquo;Oh, there&amp;rsquo;s this bug&amp;rdquo;
or
&amp;ldquo;It would be really cool if this feature existed&amp;rdquo;
and I work on adding that feature.
I use qutebrowser every day and being able to change what you use every day
is really nice.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you find out about qutebrowser in the first place?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I first heard about qutebrowser about two years ago.
I actually dismissed it at the time because it was based on WebKit,
which crashed &lt;em&gt;a lot&lt;/em&gt;.
I was fine with pages not rendering properly and stuff like that,
but I&amp;rsquo;m not fine with crashing.
Because of that, I stuck with
&lt;a href=&#34;http://vimperator.org/vimperator.html&#34;&gt;Vimperator&lt;/a&gt;,
and similar extensions,
but now qutebrowser is relatively rock-solid,
so it&amp;rsquo;s now usable as a daily-driver for me.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I noticed that you use Emacs org-mode to make your personal website,
but qutebrowser, at least by default, has all Vim-style keybindings.
Where do you stand on the editor war?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;In my freshman year of college, I heard about Vim and spent a lot of time
learning it and really really liked it.
It just made me feel way more productive.
I really didn&amp;rsquo;t like constantly
moving my hand back and forth between the keyboard and mouse
and Vim cut that out completely.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;At some point, I got kind of frustrated with Vim because
there wasn&amp;rsquo;t good async support in Vim at that time and
the plugins were weighing it down to the point that it was almost unusable.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I heard that Emacs had this mode called
&lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;,
which is a Vim emulation mode in Emacs.
I tried it and really liked it.
I actually think that stock evil-mode is better than stock Vim in some ways.
Also, org-mode is really great.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;One downside is that it takes a lot of time to set everything up.
If you don&amp;rsquo;t have the time, I would recommend
&lt;a href=&#34;http://spacemacs.org/&#34;&gt;Spacemacs&lt;/a&gt;.
It&amp;rsquo;s a pretty good distribution.
It can be kind of intimidating, but it&amp;rsquo;s great
for people who are coming from Vim.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which open source projects are you involved in now?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Qutebrowser is the project that I am most heavily involved with right now,
but I also do a significant amount of contribution to various Emacs things.
I&amp;rsquo;ve contributed a little to org-mode and a bunch of other Emacs tools
and plugins.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I think of contributions like this as an extension of my dotfiles,
because whenever I configure things,
I would rather have them be public than just be in my dotfiles.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Something that I see commonly in other programmers and CS students is
an interest in and desire to start contributing to open source,
but they see it as this advanced and intimidating thing that only
really experienced programmers can do.
What advice do you have for students who are in this boat and want to
getting involved with open source but don&amp;rsquo;t know where to start?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;This is a great question because I was affected by that feeling as well
and I think that most people are.
Even if you&amp;rsquo;ve been contributing for a while,
it&amp;rsquo;s easy to be worried or feel that you&amp;rsquo;re not smart enough to understand
what&amp;rsquo;s going on with the code.
In practice though, I don&amp;rsquo;t think that you should worry about those things
because the maintainers of open source software are usually really friendly
to beginners.
They know that people who are just getting started don&amp;rsquo;t know much about the
workflow,
so if you make mistakes that&amp;rsquo;s totally okay because everyone makes mistakes,
even the most experienced people.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;What I would recommend for people who are just getting started is
to start off with little small contributions,
even if they are just documentation or typo fixes, and work your way up,
especially if they are new to programming.
It can be intimidating to dive in to the code
if you don&amp;rsquo;t know enough about programming to
make a change.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Documentation fixes are really helpful for maintainers because they often don&amp;rsquo;t
actually look at the readme or the documentation very much,
and when they do, they don&amp;rsquo;t look at it with the eyes of someone who is new
to the project and actually needs the documentation.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have any specific suggestions for places to get started?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;One of the friendliest communities to get started in is the DuckDuckGo
community.
They are really nice and are a perfect place to start.
One cool thing you can work on for them is their
&lt;a href=&#34;https://duck.co/ia&#34;&gt;instant answers&lt;/a&gt;.
These are things that DuckDuckGo will display above the search results
for certain searches.
One of the more popular types of instant answers is their cheatsheets.
If you type in something like &amp;ldquo;vim cheatsheet&amp;rdquo; to DuckDuckGo,
it will show you a Vim cheatsheet right there in the search results.
They have end-to-end tutorials for their entire contribution process.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;recommended-readings&#34;&gt;Recommended Readings&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I like to end each interview by asking the subject to recommend two articles,
books, videos, podcasts, etc. that made an impact on them recently.
These recommendations may be related to open source software, to software
engineering in general, or completely unrelated to computers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;My first link is from sircmpwn, the creator of
&lt;a href=&#34;http://swaywm.org/&#34;&gt;sway&lt;/a&gt;,
and it&amp;rsquo;s his blog post
&lt;a href=&#34;https://sircmpwn.github.io/2018/03/17/Hack-everything-without-fear.html&#34;&gt;&lt;em&gt;Hack everything without fear&lt;/em&gt;&lt;/a&gt;.
In it, he addresses the topic of being intimidated by large open source projects
and he explains why you shouldn&amp;rsquo;t be too intimated and should just go for it.
I think his attitude about it is really great because he tries to make it
so that everything is up for grabs, which I like a lot.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;My next one is more technical, but
it taught me a surprising amount about PyQt in a really short amount of time.
It&amp;rsquo;s about PyQt memory management and it&amp;rsquo;s called
&lt;a href=&#34;http://enki-editor.org/2014/08/23/Pyqt_mem_mgmt.html&#34;&gt;&lt;em&gt;PyQt. How to shoot yourself in the foot.&lt;/em&gt;&lt;/a&gt;
I was completely new to memory management when I read it and it taught me a ton
about it in less than a page.
It&amp;rsquo;s a little bit outdated now, unfortunately,
but still relevant if you want to contribute to PyQt.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You can find Jay at &lt;a href=&#34;http://jgkamat.github.io/&#34;&gt;jgkamat.github.io&lt;/a&gt;
and on Github &lt;a href=&#34;https://github.com/jgkamat&#34;&gt;@jgkamat&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Counting Usernames from Malicious Login Attempts</title>
        <link>https://jamesbvaughan.com/counting-malicious-usernames/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/counting-malicious-usernames/</guid>
        <pubDate>
          Mon, 07 May 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;A while back, when I was relatively new to running a VPS
(I&amp;rsquo;m still new, but I&amp;rsquo;m less new than I was then),
I was looking through my sshd logs and noticed that I was getting
&lt;strong&gt;a ton&lt;/strong&gt; of malicious login attempts.
This initially freaked me out a bit and I wasn&amp;rsquo;t sure what to make of it.&lt;/p&gt;

&lt;p&gt;Eventually I learned more about how to properly secure my server
and in the process, I ended up having some fun with the logs.
They included the usernames that the attackers were trying to log in with.
Some of these names seemed strange to me so I took
a closer look in order to find out which usernames were most
commonly attempted.&lt;/p&gt;

&lt;p&gt;I thought the results were pretty interesting,
so I&amp;rsquo;m going to share them with you here.
First, I&amp;rsquo;m going to walk you through the steps I took to find this
list of commonly attempted username,
but you&amp;rsquo;d can skip this and scroll to the bottom if you&amp;rsquo;d just like
to see the list I found.&lt;/p&gt;

&lt;h2 id=&#34;finding-the-list-of-names&#34;&gt;Finding the List of Names&lt;/h2&gt;

&lt;p&gt;The steps to find a list of invalid usernames like this are pretty simple
and straightforward,
but might not be clear or obvious to someone new to using unix
command line tools.
(They would have seemed like magic to me a few years ago!)
For those that are new and curious,
I&amp;rsquo;m going to walk through each step and explain how I found the list.&lt;/p&gt;

&lt;p&gt;I run sshd under systemd,
and if you run a recent version of a major Linux distribution on your server,
you probably do too.
You can view logs from services running under systemd using &lt;code&gt;journalctl&lt;/code&gt;,
so we can view the ssh logs with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ journalctl -u ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which will show you way more than you need for this exercise.&lt;/p&gt;

&lt;p&gt;We can filter the &lt;code&gt;journalctl&lt;/code&gt; output to just the lines we
care about (those containing the string &lt;em&gt;&amp;ldquo;Invalid user&amp;rdquo;&lt;/em&gt;),
using &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ journalctl -u ssh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;Invalid user&amp;#39;&lt;/span&gt;
Apr &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:51:33 sshd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;28910&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: Invalid user danny from &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt;.20.58.3 port &lt;span class=&#34;m&#34;&gt;58067&lt;/span&gt;
Apr &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;:22:48 sshd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;29393&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: Invalid user t7inst from &lt;span class=&#34;m&#34;&gt;195&lt;/span&gt;.133.234.67 port &lt;span class=&#34;m&#34;&gt;48641&lt;/span&gt;
Apr &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;:42:45 sshd&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;29720&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: Invalid user zimbra from &lt;span class=&#34;m&#34;&gt;139&lt;/span&gt;.99.122.129 port &lt;span class=&#34;m&#34;&gt;49362&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&amp;rsquo;re just looking at logs of login attempts with invalid usernames.&lt;/p&gt;

&lt;p&gt;All we care about are the usernames,
so let&amp;rsquo;s cut those out using &lt;code&gt;cut&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ journalctl -u ssh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;Invalid user&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
danny
t7inst
zimbra
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should print out a big list of all the invalid usernames,
in the order that they appear in the logs,
but this list is too long,
it contains a bunch of duplicates,
and it&amp;rsquo;s not sorted in an order that we care about.&lt;/p&gt;

&lt;p&gt;Fortunately for us,
there are standard tools for fixing all of these problems!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we sort the names (&lt;code&gt;sort&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then we filter out duplicates (&lt;code&gt;uniq&lt;/code&gt;)
and print a count of how many times each name
occurred next to each name (&lt;code&gt;-c&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Next we sort again,
this time numerically rather than alphabetically (&lt;code&gt;-n&lt;/code&gt;),
and in reverse so that the highest numbers are at the top (&lt;code&gt;-r&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Finally, we take just the top 25 names (&lt;code&gt;head -n 25&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ journalctl -u ssh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;Invalid user&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq -c &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -nr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;
  &lt;span class=&#34;m&#34;&gt;2563&lt;/span&gt; admin
   &lt;span class=&#34;m&#34;&gt;745&lt;/span&gt; user
   &lt;span class=&#34;m&#34;&gt;658&lt;/span&gt; support
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s it! Just pipe the logs through a few different tools and
you&amp;rsquo;ve got the list.&lt;/p&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;

&lt;p&gt;These were the top results when I ran this on my server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;   &lt;span class=&#34;m&#34;&gt;2563&lt;/span&gt; admin
    &lt;span class=&#34;m&#34;&gt;745&lt;/span&gt; user
    &lt;span class=&#34;m&#34;&gt;658&lt;/span&gt; support
    &lt;span class=&#34;m&#34;&gt;483&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
    &lt;span class=&#34;m&#34;&gt;323&lt;/span&gt; ubnt
    &lt;span class=&#34;m&#34;&gt;213&lt;/span&gt; guest
    &lt;span class=&#34;m&#34;&gt;207&lt;/span&gt; tech
    &lt;span class=&#34;m&#34;&gt;202&lt;/span&gt; oracle
    &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; operator
    &lt;span class=&#34;m&#34;&gt;196&lt;/span&gt; manager
    &lt;span class=&#34;m&#34;&gt;158&lt;/span&gt; webadmin
    &lt;span class=&#34;m&#34;&gt;151&lt;/span&gt; ftpuser
    &lt;span class=&#34;m&#34;&gt;148&lt;/span&gt; pi
    &lt;span class=&#34;m&#34;&gt;105&lt;/span&gt; vnc
    &lt;span class=&#34;m&#34;&gt;105&lt;/span&gt; naigos
    &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; ubuntu
     &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt; student
     &lt;span class=&#34;m&#34;&gt;94&lt;/span&gt; user1
     &lt;span class=&#34;m&#34;&gt;93&lt;/span&gt; debian
     &lt;span class=&#34;m&#34;&gt;78&lt;/span&gt; administrator
     &lt;span class=&#34;m&#34;&gt;74&lt;/span&gt; PlcmSpIp
     &lt;span class=&#34;m&#34;&gt;74&lt;/span&gt; backup
     &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; demo
     &lt;span class=&#34;m&#34;&gt;58&lt;/span&gt; test1
     &lt;span class=&#34;m&#34;&gt;58&lt;/span&gt; mysql
     &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; testuser
     &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt; shoutcast&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on that list,
my guess is that those are all default usernames for different systems
that attackers have found the most success with.
I haven&amp;rsquo;t talked with many other people that manage small servers
for blogs and personal projects like mine to find out if these numbers
are common,
but I assume that they are normal for other publicly accessible servers.&lt;/p&gt;

&lt;h2 id=&#34;security-considerations&#34;&gt;Security Considerations&lt;/h2&gt;

&lt;p&gt;Looking into this frightened me at first and made me worried about
the security of my server.
I&amp;rsquo;ve learned more about security since then,
and while I&amp;rsquo;m still far from an expert,
I know enough about my system now that I&amp;rsquo;m not worried about login
attempts like these.&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;m embarrassed to say this now, but
one of the first things I did after making this list the first time was
grep for my actual username.
I felt a bit of relief to know that no one had tried my actual username
when it didn&amp;rsquo;t come up,
until I realized that I would have already filtered out my username earlier
with &lt;code&gt;grep &#39;Invalid user&#39;&lt;/code&gt; &amp;hellip;&lt;em&gt;facepalm&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;A couple security techniques I&amp;rsquo;m using now are
&lt;a href=&#34;https://help.ubuntu.com/community/SSH/OpenSSH/Configuring#Disable_Password_Authentication&#34;&gt;not allowing password login&lt;/a&gt;,
using &lt;a href=&#34;https://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;Fail2Ban&lt;/a&gt;,
and using a custom PAM module I made that texts my phone whenever someone
remotely logs in to my server
(I plan to write a post about this one soon).&lt;/p&gt;

&lt;p&gt;Looking at logs can actually be pretty fun!
This will sound pretty elementary to any experienced sysadmin,
but if you are just getting started with this kind of thing,
try playing around with &lt;code&gt;journalctl&lt;/code&gt;
and digging through &lt;code&gt;/var/log&lt;/code&gt; to
see if you can find anything interesting.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Timothy Gu</title>
        <link>https://jamesbvaughan.com/timothy-gu/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/timothy-gu/</guid>
        <pubDate>
          Tue, 01 May 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;In this first post in my series interviewing students in open source,
I chose to interview fellow UCLA student Timothy Gu
(&lt;a href=&#34;https://github.com/TimothyGu&#34;&gt;TimothyGu&lt;/a&gt;).
Timothy is a first year Computer Science student here at UCLA and he has been
active in open source since he was in High School.
He is a maintainer of
&lt;a href=&#34;https://github.com/nodejs/node&#34;&gt;Node.js&lt;/a&gt;
and a contributer to
&lt;a href=&#34;https://github.com/pugjs/pug&#34;&gt;pug&lt;/a&gt;,
&lt;a href=&#34;https://github.com/FFmpeg/FFmpeg&#34;&gt;FFmpeg&lt;/a&gt;,
and the
&lt;a href=&#34;https://github.com/whatwg/html&#34;&gt;whatwg html standard&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;interview&#34;&gt;Interview&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sunday, April 15, 2018.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;James: You have an impressive contribution history,
especially as a freshman in college.
How did you first get started coding?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Timothy: &amp;ldquo;I&amp;rsquo;ve always been a pretty curious person
and I always want to know how things work.
When I see something that is broken, I always want to fix it.
Back in middle school, I was probably the techiest person in my family.
My mom had this DVD that she wanted to convert to a format that could be
shared to my grandparents, so she asked me to take a look at it.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I found this open source tool called FFmpeg which seemed like the perfect
tool for this,
but the problem was that FFmpeg was really badly documented and very complex.
I knew that it was the right tool for the task, but didn&amp;rsquo;t know how to use it.
After a lot of work, I finally figured it out, but I didn&amp;rsquo;t want other
people to have to go through that.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;That kind of began my journey into open source:
I wrote up the documentation for what I had done on the FFmpeg wiki and
then started trying to contribute to the official documentation.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It wasn&amp;rsquo;t really &lt;em&gt;coding&lt;/em&gt; because it was just fixing documentation and
typos, but around that same time, I decided to start trying to learn to
read the code for FFmpeg in order to actually understand how it works.
This got me started learning C, which FFmpeg is written in.
I got stuck when I came to pointers because I had no idea how they worked,
so I started reading more of FFmpeg&amp;rsquo;s code which exposed me to how they
actually used C and used pointers and stuff like that.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;For a few months, I didn&amp;rsquo;t really write any code myself,
but rather, I read a lot of code written by other people and learned a lot from it.
This was good for me because I got to see how code is actually written and how
the coding industry works.
Even though I wasn&amp;rsquo;t writing my own code,
I learned a lot about programming practices and paradigms.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you know about FFmpeg in the first place?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Well, I didn&amp;rsquo;t.
I just looked up tutorials online on how to convert things from one format to
another and that led me to FFmpeg.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I&amp;rsquo;m naturally curious and like to know how things work,
so I looked up the FFmpeg commands that I was running,
and that led me deeper into FFmpeg.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you get started reading the code,
having never been exposed to programming before?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I couldn&amp;rsquo;t tell you exactly when I first looked at the code, but like I said,
I had been interested in computers for a long time
and I just thought that looking through the code probably isn&amp;rsquo;t that difficult.
Computers are more or less logical and having some experience with them made me
think that these small issues I was finding would not be too difficult to
understand in the code.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After your involvement with FFmpeg,
what other projects did you get involved with?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;After starting with FFmpeg, I learned a lot more about C,
but then in high school, I learned Node.js.
JavaScript was a pretty easy language compared to C,
so I found that I could start to create my own things
rather than just reading other people&amp;rsquo;s code.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I got the idea to make a better version of the continuous integration
tool that FFmpeg had, so I got started writing that with Node.js,
and it worked pretty well,
but I didn&amp;rsquo;t really know much about JavaScript,
or especially about asynchronous programming back then.
It was a foreign concept to me.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;For the longest time, I was kind of rolling in the mud because I had no idea
what was going on,
but because of that experience I did learn a lot about
the quirks of the platform and how things were supposed to work.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;There was a lot of trial and error,
but in hindsight I think that was the best way to learn,
because you basically see all the errors that you can possibly see and then
when you see them again you&amp;rsquo;ll be able to fix them because you&amp;rsquo;ve seen them
before.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;If I were to look back at the code I wrote back then,
it would probably be really weird and not the way I would do things now,
but it was a really good learning experience.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;One of the other projects that I invested a lot of time in was Pug,
which used to be called Jade.
My first contribution to that project was also a documentation fix.
I think it was just fixing a broken link,
something really small like that, and then it led to something more.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s been a while since your last blog post.
Do you have plans to keep writing more on there?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I do like writing sometimes,
but I don&amp;rsquo;t really have a solid plan for updating my blog.
The blog isn&amp;rsquo;t my only medium for writing though;
over this winter I wrote
&lt;a href=&#34;https://timothygu.me/es-howto/&#34;&gt;a document on how to read and understand the JavaScript spec&lt;/a&gt;.
I personally think that more people should get started with reading the spec
because it&amp;rsquo;s such a useful resource.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I&amp;rsquo;m part of ACM Hack at UCLA and we have a few internal projects that
we work on.
I wrote a document recently trying to encourage people in ACM Hack to
read through other people&amp;rsquo;s code.
Right now the code reviews are mostly done by me and one other person,
but I really want to try to get other people working on the project
to be involved in reading through the code as well.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What advice do you have for students who are interested in getting involved
in open source but don&amp;rsquo;t know where to start?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;That&amp;rsquo;s a difficult question because the way I learn things is through a LOT
of trial and error, which is something that I don&amp;rsquo;t want everybody to have
to go through.
I had a lot of free time in high school, which gave me the opportunity to do
that, but in college everyone is a lot more busy,
so it&amp;rsquo;s difficult for me to be able to apply my experience to other people.
The best thing I can say is that open source developers and maintainers are
just people.
Some have more experience and some have less experience
(like me when I was starting out with FFmpeg),
and honestly everyone is willing to help.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The JavaScript community tends to have a lot of new people and people are
always happy to help them out.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;For people that are interested but don&amp;rsquo;t really know where to start,
the best thing is to help out on a project that you actually use yourself.
That makes it easier to contribute because you have an idea of how the
software works and you can reason through things better than staring
with a completely new project to you.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;If you spot a bug in a project you use, you can file an issue,
but you can also go further than that and try to look through the source code
to find out where the bug is coming from.
I think that this is the most effective way of getting involved in a project.
If you don&amp;rsquo;t understand something, ask questions.
People are often a lot more friendly than you would expect.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;There&amp;rsquo;s a big difference between trying to fix a bug you found yourself and
trying to fix someone else&amp;rsquo;s bug.
In large software projects, bugs are very hidden and require a very specific
set of circumstances for the bug to occur.
If you discover a bug on your own, you are often the most knowledgeable
person about that bug.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;recommended-readings&#34;&gt;Recommended Readings&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I like to end each interview by asking the subject to recommend a couple
articles, books, videos, podcasts, etc. that made an impact on them recently.
These recommendations may be related to open source software, to software
engineering in general, or completely unrelated to computers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Timothy had a unique answer to this compared to other people I&amp;rsquo;ve spoken with.
The number one thing he recommended reading if you want to improve and grow
with your programming skill and experience with open source is &lt;strong&gt;code&lt;/strong&gt;.
Not just your own code, but most importantly, &lt;em&gt;other people&amp;rsquo;s code&lt;/em&gt;.
Reading through other people&amp;rsquo;s issues, code, and pull requests was the most
effective way he learned and he recommends it for everyone.&lt;/p&gt;

&lt;p&gt;He also recommends reading through the official JavaScript spec
and has written up
&lt;a href=&#34;https://timothygu.me/es-howto/&#34;&gt;an extensive guide on how to read it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find Timothy at &lt;a href=&#34;https://timothygu.me&#34;&gt;timothygu.me&lt;/a&gt;,
on Github &lt;a href=&#34;https://github.com/TimothyGu&#34;&gt;@TimothyGu&lt;/a&gt;,
and on Twitter &lt;a href=&#34;https://twitter.com/Timothy_Gu&#34;&gt;@Timothy_Gu&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>College Advice I Would Give My Freshman Self</title>
        <link>https://jamesbvaughan.com/college-advice/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/college-advice/</guid>
        <pubDate>
          Mon, 30 Apr 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;As I approach the end of my undergraduate years at UCLA,
I&amp;rsquo;ve been spending some time reflecting what I&amp;rsquo;ve learned and the
improvements that I have made to my workflows for classes, coding,
and general college life.&lt;/p&gt;

&lt;p&gt;There are a handful of skills that I have learned and processes I have optimized
for myself that I would love to have learned or optimized earlier on in college.&lt;/p&gt;

&lt;p&gt;In this post, I will catalog some of these tips in the hope that they will
help out students getting started on their journey through college.
I have directed some at Computer Science students specifically,
and some at UCLA students specifically, but
most of them are applicable to students in any major at any school.&lt;/p&gt;

&lt;h2 id=&#34;class-advice&#34;&gt;Class Advice&lt;/h2&gt;

&lt;h4 id=&#34;sit-in-the-front&#34;&gt;Sit In The Front&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve found sitting toward the front of class to have some benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It makes it harder to get distracted on your phone or computer
because the professor can clearly tell if you do.&lt;/li&gt;
&lt;li&gt;It makes it easier to hear and understand the professor and to read the
blackboard or slides.&lt;/li&gt;
&lt;li&gt;The professor will get to know your face, and will remember that you
pay attention and sit in the front when she is grading your exams and papers.
I suspect that this can have positive effects on your grades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sitting in the front is especially advantageous during exams:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are almost always a bunch of open seats in the front during exams.&lt;/li&gt;
&lt;li&gt;The professor/TAs won&amp;rsquo;t wrongfully suspect you of cheating
since you can&amp;rsquo;t see other people&amp;rsquo;s exams.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll have way more legroom in classrooms with tightly packed desks.&lt;/li&gt;
&lt;li&gt;You won&amp;rsquo;t have to squeeze past anyone when you get up to turn in your exam.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;read-your-textbooks&#34;&gt;Read Your Textbooks&lt;/h4&gt;

&lt;p&gt;Some people are naturally pretty good at doing this.
Personally, I found it difficult to motivate myself to keep up with all the
readings for my classes in the beginning of college, but as time went on,
I found that doing the assigned readings &lt;em&gt;before&lt;/em&gt; the lectures on those
readings has a tremendous impact on how much I get out of lectures.
The readings give me a good baseline understanding of the material,
and then the lecture helps fill in all the gaps and drill in the key points.&lt;/p&gt;

&lt;h4 id=&#34;go-to-office-hours&#34;&gt;Go to Office Hours&lt;/h4&gt;

&lt;p&gt;This is pretty common advice for college freshman,
and it&amp;rsquo;s something I heard was good to do all the time, but
was slow to start doing.
As someone who is not naturally inclined to attend office hours,
I can tell you that I have never regretted going and have been glad
that I chose to go every single time that I have.
Even if you don&amp;rsquo;t have specific questions,
office hours are great for listening to other students&amp;rsquo; questions
that you might not have even thought to ask,
and a great time to get to know your professors better.
This is important if you go to a big school like UCLA,
where you won&amp;rsquo;t get to know your professors well unless you are
intentional about it.&lt;/p&gt;

&lt;h4 id=&#34;learn-to-take-good-notes&#34;&gt;Learn to Take Good Notes&lt;/h4&gt;

&lt;p&gt;This is something that I struggled with for a long time.
I&amp;rsquo;ve tried a whole bunch of different note taking systems and techniques
and never took notes that were truly useful to me until I settled on a system
that felt natural for me.&lt;/p&gt;

&lt;p&gt;For me, that system involves taking notes on my computer in Markdown in Vim,
and then converting them to PDFs and HTML pages using Pandoc.
This system works well for me, but would be horrible for most people.
Experiment with a variety of systems,
including pen-and-paper systems and computer-based systems,
until you find out what&amp;rsquo;s best for you
and then stick with it.&lt;/p&gt;

&lt;p&gt;You should also experiment with &lt;em&gt;what kind of notes&lt;/em&gt; you take.
Some people copy down what&amp;rsquo;s on the professor&amp;rsquo;s slides word-for-word.
(This has always struck me as a strange technique because it makes it hard to
pay attention to the lecture and the slides are often posted online anyway.)
Others write down every word that the professor says.
I know some people that take notes when they do their readings before lecture
and then annotate those notes with any new information from the lecture.
Find out what feels right for you.&lt;/p&gt;

&lt;h4 id=&#34;give-yourself-a-light-final-quarter-semester&#34;&gt;Give Yourself a Light Final Quarter/Semester&lt;/h4&gt;

&lt;p&gt;I planned my schedule such that my final quarter was the lightest one
(as far as number of classes goes) of all my quarters at UCLA.
It&amp;rsquo;s turned out to be a great decision and I recommend that anyone else who
is able to should do the same.&lt;/p&gt;

&lt;h2 id=&#34;coding-advice&#34;&gt;Coding Advice&lt;/h2&gt;

&lt;p&gt;This section has advice for any students who are into programming,
even if they are not majoring in Computer Science or a related field.&lt;/p&gt;

&lt;h4 id=&#34;learn-to-use-common-tools&#34;&gt;Learn To Use Common Tools&lt;/h4&gt;

&lt;p&gt;There specific tools commonly used in software development that are
essential for developers to learn about.
The sooner you build up some familiarity with these tools, the better.
They will make coding homework assignments way easier,
they will supercharge your personal projects,
and they will be indispensable during any software engineering internships
you may have.&lt;/p&gt;

&lt;h5 id=&#34;git&#34;&gt;Git&lt;/h5&gt;

&lt;p&gt;This is a version control system that tracks changes you make to your code.
There is so much to git that you will never stop learning more
about it, but for now all you need to know is that
it provides a nice workflow for collaborating on software projects
and you can use it as a way to back up changes you make to personal projects
and coding homework assignments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rogerdudler.github.io/git-guide/&#34;&gt;This guide&lt;/a&gt;
is a good introduction to git&amp;rsquo;s basic features.&lt;/p&gt;

&lt;h5 id=&#34;the-unix-command-line&#34;&gt;The Unix Command Line&lt;/h5&gt;

&lt;p&gt;In my opinion,
being comfortable with the command line is a must when it comes to writing
software.
Over time, you will find that common tasks related to programming are
considerably faster and more clear when performed from the command line.&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;re weird like me, you will even end up liking it so much that you
start doing everything from managing your filesystem to checking your email
to reading the news to browsing Reddit from the terminal).&lt;/p&gt;

&lt;h5 id=&#34;linux&#34;&gt;Linux&lt;/h5&gt;

&lt;p&gt;This one isn&amp;rsquo;t strictly necessary, but for me,
using Linux has led me to some cool areas of computing and
been my introduction to my favorite and most commonly used software.
Many students get by with little more than a basic surface-level familiarity
with Linux, but if you find that you enjoy it, it can be really useful.
On top of that, the skills that you will inevitably pick up through
long-term Linux usage will help you understand a lot of aspects of
software development on a deeper level.&lt;/p&gt;

&lt;h4 id=&#34;find-something-you-enjoy&#34;&gt;Find Something You Enjoy&lt;/h4&gt;

&lt;p&gt;My friends who have been most successful in CS are those that found
a topic within computing that fascinates them and then dove deep into that
topic.
For some, that topic is Artificial Intelligence and Machine Learning.
For others, it&amp;rsquo;s mobile development.
For me, it was Linux and open-source.&lt;/p&gt;

&lt;p&gt;Once you find something that you really enjoy,
set aside some time every week to learn more about it.
(Ideally you would enjoy it enough that you don&amp;rsquo;t need to be told to do that.)
Watch videos, read articles and blog posts, and work on personal projects
related to that thing.
This is fun
and can also make for great conversation topics when interviewing for
jobs and internships.&lt;/p&gt;

&lt;h2 id=&#34;college-life-advice&#34;&gt;College Life Advice&lt;/h2&gt;

&lt;p&gt;This section has general college advice that can apply to anyone.&lt;/p&gt;

&lt;h4 id=&#34;use-a-calendar&#34;&gt;Use A Calendar&lt;/h4&gt;

&lt;p&gt;Making heavy use of a structured calendar has been a central part of my life
over the past four years.
I don&amp;rsquo;t know how I would have gotten through without it.
I&amp;rsquo;ve gone through different phases of calendar use,
from OCD-level use where I put every single thing I do on my calendar,
from sleep to homework to brushing my teeth,
to more relaxed use where I limit what I put on my calendar to the events
and tasks that are strictly tied to specific dates and times.
Both of those levels worked for me at the times that I was using them, but
the constant thing has been some form of a calendar to keep track of what
I need to do.&lt;/p&gt;

&lt;h5 id=&#34;find-the-right-calendar-for-you&#34;&gt;Find The Right Calendar For You&lt;/h5&gt;

&lt;p&gt;This is becoming a common theme in this post, but to find out
what you works best for you,
you need to experiment with different calendar systems.
For some people that&amp;rsquo;s a personal planner notebook with a paper calendar inside
it, and for others it&amp;rsquo;s the calendar app on their phone.
For me, it&amp;rsquo;s been Google Calendar.
Having a thorough schedule synchronized between my phone and computer is a must
for me, and Google Calendar does a great job of that.&lt;/p&gt;

&lt;h5 id=&#34;use-shared-calendars&#34;&gt;Use Shared Calendars&lt;/h5&gt;

&lt;p&gt;Shared calendars are great and I only started using them heavily this year.
They are great for student groups where you need to keep a large number of
people up to date on the details of upcoming events, but
they are also useful on a smaller scale.
For example,
my girlfriend and I keep a shared calendar where we add anything that we are
going to be doing together.
This saves us the work of adding events to both of our calendars and helps us
avoid errors where one of us adds an event to the wrong time or date.&lt;/p&gt;

&lt;h5 id=&#34;make-an-interesting-classes-calendar&#34;&gt;Make An &amp;ldquo;Interesting Classes&amp;rdquo; Calendar&lt;/h5&gt;

&lt;p&gt;This is an idea that I started implementing this quarter, but
it&amp;rsquo;s something I wish I had started at the beginning of college.
The concept is simple:
Make a calendar in whatever calendar app you use that includes the
classes in a given quarter or semester that sound interesting to you that
you are unlikely to ever actually enroll in.
Then, whenever you are on campus and have some free time,
you can toggle on this calendar and see if there are any classes coming up
that you can go sit in on and listen to the lecture in.
(Don&amp;rsquo;t forget to add the locations of each class to the calendar events
so that you don&amp;rsquo;t have to look them up each time.)&lt;/p&gt;

&lt;h4 id=&#34;prioritize-relationships&#34;&gt;Prioritize Relationships&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not just talking about romantic relationships here.
You need to prioritize &lt;em&gt;all&lt;/em&gt; of the relationships you develop during college.
The closer I get to graduating,
the more I&amp;rsquo;ve realized that the most valuable takeaways I&amp;rsquo;ve gotten from my time
here are the relationships I&amp;rsquo;ve developed with people.&lt;/p&gt;

&lt;p&gt;I am in a co-ed entrepreneurship fraternity at UCLA and one of my favorite
things about the fraternity is our &amp;ldquo;interview&amp;rdquo; system:
We require all new members to conduct an &amp;ldquo;interview&amp;rdquo; with every existing
member which consist of hanging out with them one-on-one
for 2 to 3 hours and getting to know them.
I love these because it provides a great way to truly get to know
people and start to build friendships with them.
Having a designated time like this to be intentional about getting to
know someone is a unique situation that I wish more people got to experience.
Sometimes these friendships don&amp;rsquo;t go much farther than surface-level, but
a surprisingly high percentage of them turn into genuine and deep
relationships.&lt;/p&gt;

&lt;p&gt;If you are not a part of a student group like this,
nothing is stopping you from trying the same thing, but
you will have to be more self-directed about it.
Take a look at your social circles and start inviting individuals to go to
breakfast or lunch or to go for a walk with you.
Some people will think this is strange at first, but
I am confident that neither of you will regret it afterward.&lt;/p&gt;

&lt;h4 id=&#34;sleep&#34;&gt;Sleep&lt;/h4&gt;

&lt;p&gt;I didn&amp;rsquo;t take sleep as seriously as I should have until this year.
For most of college, I was staying up until sometime between midnight
and 3 a.m., and then sleeping in until sometime between 9 a.m. and 11 a.m..
To make matters worse,
I would often procrastinate homework assignments and studying for exams until
the night before and then stay up late studying or finishing the assignment.&lt;/p&gt;

&lt;p&gt;This year, I have started trying to turn myself into more of a morning person
and let me tell you, it feels &lt;em&gt;so&lt;/em&gt; much better than going to bed late and
waking up late.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve taken a bit of an extreme approach to this by most people&amp;rsquo;s standards
and have been trying to get in bed between 9 p.m. and 10 p.m. and then waking up
at 5 a.m..
I&amp;rsquo;ve shifted most of the work that I used to do at night to the mornings
and for me, this feels way more productive.
Where I was constantly distracted by Facebook, Reddit, and YouTube late at
night, I am able to stay focused way more when I do work in the mornings.&lt;/p&gt;

&lt;p&gt;When I talk to friends about this,
they often ask me about my morning routine and ask for tips on getting up that
early.
I don&amp;rsquo;t have a super strict morning routine, but I have found a some practices
that to help me get out of bed and stay out of bed in the mornings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t use your phone or computer in bed before you go to sleep.&lt;/li&gt;
&lt;li&gt;Have a clear idea of what you are going to do in the morning.&lt;/li&gt;
&lt;li&gt;Drink a glass of water right when you get up.&lt;/li&gt;
&lt;li&gt;Turn the lights on.&lt;/li&gt;
&lt;li&gt;Do some quick push-ups or pull-ups or go for a short jog.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not saying that these are necessarily the right tips for everybody,
nor am I saying that waking up as early as I do will necessarily make all
other people more productive.
Every person is different, but those are the tips that work for me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading!
I hope that you found some of this advice useful and applicaple.&lt;/p&gt;

&lt;p&gt;Do you agree or disagree with any of these pieces of advice?
Do you have any advice that you would give &lt;em&gt;your&lt;/em&gt; freshman self?
Let me know in the comments below!&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Open Source Students: Introduction</title>
        <link>https://jamesbvaughan.com/open-source-students/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/open-source-students/</guid>
        <pubDate>
          Sun, 29 Apr 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I&amp;rsquo;ve been interested in the open source world for about as long as I&amp;rsquo;ve been
interested in programming, and despite wanting to ever since then,
I didn&amp;rsquo;t start contributing to any projects that I use until relatively
recently.
I think that the main reason for this is that I was intimidated by the scale
of the projects around the open source software that I used and by what I
perceived as a long and complex process required to contribute to them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen this same feeling in friends of mine that are interested in but
intimidated by open source projects,
and one of my goals with this series is to extinguish that intimidation by
showcasing students who are active in open source projects that they care about.
I plan to feature students will range from people who are just getting started
and have only one or two pull requests to people who are core maintainers for
very large software projects.&lt;/p&gt;

&lt;p&gt;Another goal of the series is simply to highlight
the work done by these students.
Despite its open nature,
work on open source software often goes unappreciated,
and I want to help shed some light on the awesome work that these people are
doing.&lt;/p&gt;

&lt;h3 id=&#34;the-interviews&#34;&gt;The Interviews&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jamesbvaughan.com/timothy-gu&#34;&gt;Timothy Gu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jamesbvaughan.com/jay-kamat&#34;&gt;Jay Kamat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Saving $167,000 on Groceries</title>
        <link>https://jamesbvaughan.com/grocery-prices/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/grocery-prices/</guid>
        <pubDate>
          Mon, 26 Feb 2018 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I usually spend a good chunk of my free time reading articles and listening to
podcasts on software development, tech, and other industry news.
Over the past few months, I&amp;rsquo;ve been spending a growing portion of that time
learning about personal finance.
At the time of this writing,
I have just a few months left in college and at the beginning of this quarter
the reality that I am soon going to be working full time started to sink in.
At the same time, I began to realize how little I really knew about personal
finance, so I decided to change that.&lt;/p&gt;

&lt;p&gt;After getting some recommendations from a couple friends who are further along
in life than I am,
I dove deep into the world of personal finance.
I began reading books, listening to podcasts, and following blogs.
After a couple of weeks, it became a bit of an obsession and I was determined
to learn everything I could about the subject before I start working and having
a real income to manage and budget.
Now, 3 books, over 100 hours of podcasts, and countless blog posts later,
I&amp;rsquo;ve slowed down a bit and started to solidify the things that I am learning by
putting them into practice and by sharing them with my friends and family.&lt;/p&gt;

&lt;p&gt;If consuming all that personal finance literature has done one thing,
it&amp;rsquo;s made me hyper-aware of the cashflows in my life.
I&amp;rsquo;ve found that, like most people, the three largest categories in my spending
are food, housing, and transportation.
I plan to write posts about each of those categories,
and in this first one I will be focusing on food.
More specifically, I&amp;rsquo;ll be talking about choice of grocery store.&lt;/p&gt;

&lt;h3 id=&#34;where-to-get-food&#34;&gt;Where To Get Food&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s often preached in the personal finance community that one of the fastest
ways that most people can start saving extreme amounts of money very quickly is
by choosing not to eat out and to cook at home.
That shift away from eating out is the topic of a separate post,
but chances are you&amp;rsquo;re like most people and you already cook at home and eat
food from grocery stores for something between 40% and 90% of your meals,
so you can certainly benefit from reduced grocery costs.&lt;/p&gt;

&lt;p&gt;Reducing grocery spending has been on my mind a lot this week,
so I decided to do a small experiment.
There is a disproportionately high number of grocery stores next to the student
apartments at UCLA, but the two I find myself at most frequently are Ralphs
and Whole Foods.
I like going to Whole Foods because of the free samples,
the hot foods bar (which is actually more expensive to eat at than a lot of
restaurants I go to),
and most recently because they introduced 5% cash back for Amazon Prime Visa
carriers.
That being said, I do feel guilty whenever I am in Whole Foods because I know
that it is widely considered to be outrageously expensive.&lt;/p&gt;

&lt;p&gt;The goal of my experiment was to determine just &lt;em&gt;how much&lt;/em&gt; more expensive
Whole Foods is than Ralphs.&lt;/p&gt;

&lt;h2 id=&#34;the-experiment&#34;&gt;The Experiment&lt;/h2&gt;

&lt;h3 id=&#34;methods&#34;&gt;Methods&lt;/h3&gt;

&lt;p&gt;The set up was fairly simple.
I planned to put together a shopping list,
compare the prices for all of the items from Ralphs and from Whole Foods,
and then extrapolate the results in order to determine how the price differences
would affect my finances in the long run.&lt;/p&gt;

&lt;h3 id=&#34;prediction&#34;&gt;Prediction&lt;/h3&gt;

&lt;p&gt;My hypothesis was that Whole Foods would be more expensive,
based on its reputation and a bit of personal experience,
but I didn&amp;rsquo;t expect the difference to be too large.
If it were small enough,
it would probably be worth it for the slightly shorter walk to and from my
apartment compared to Ralphs, I thought.&lt;/p&gt;

&lt;h3 id=&#34;collecting-data&#34;&gt;Collecting Data&lt;/h3&gt;

&lt;p&gt;I put together a shopping list for a specific recipe that I was going to make.
(Specifically, Joel Fuhrman&amp;rsquo;s Two Bean Chili from his Eat to Live cookbook,
plus a few other things I needed to get.)
I then went to both Ralphs and Whole Foods and recorded the prices of everything
on my shopping list.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;When I got home, I plugged all the prices I had recorded in to a spreadsheet
to compare the two grocery stores side-by-side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jamesbvaughan.com/grocery-prices/grocery-spreadsheet.png&#34; class=&#34;img-fluid&#34;&gt;&lt;/p&gt;

&lt;p&gt;The total cost at Ralphs was $16.79.
The total cost at Whole Food was $22.09,
which can be reduced to $20.99 after the 5% cash back from Amazon.
This was certainly significant,
but that $4.20 difference between Ralphs and Whole Foods might be worth the free
samples and the shorter walk home, right?&lt;/p&gt;

&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;If we assume that the price ratios in this shopping list are representative of
the price ratios for my average grocery visit,
then we can extrapolate these results to see how they affect my spending and
saving in the long term.&lt;/p&gt;

&lt;p&gt;If I spend $300 per month on groceries at Ralphs,
then that&amp;rsquo;s $3,600 per year.
This would increase to $4,736 if I were to shop at Whole Foods instead.
Put this way, that $1,136 difference doesn&amp;rsquo;t sound nearly as innocent as the
$4.20 difference per-visit did!&lt;/p&gt;

&lt;p&gt;That alone is more than enough reason for me to stick with Ralphs,
but we can take this even further.
Let&amp;rsquo;s say we invest that $1,136 each year at 10% annual interest.
If I did that starting now, it will have grown to about $167,000 by the time
I&amp;rsquo;m 50 (I&amp;rsquo;m 22 now).
That&amp;rsquo;s a lot of money that could be put to much better use than a trip to
Whole Foods (like pursuing Financial Independence and &lt;a href=&#34;http://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/&#34;&gt;retiring a few years
earlier&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;These calculations were pretty surprising for me,
and it&amp;rsquo;s suffice to say that I&amp;rsquo;ll be cutting out those infrequent trips to
Whole Foods now.
My methods and analysis were by no means exhaustive,
and I made some ballpark assumptions in my calculations that could have
certainly skewed the results.
For example, the price ratios on that shopping list may actually be quite a bit
different than a more representative sample of my grocery shopping,
and to make this complete, I should really compare prices at the Trader Joe&amp;rsquo;s
and Target by UCLA as well.
Despite this,
I don&amp;rsquo;t expect my conclusion that choosing to shop at Ralphs rather than
Whole Foods is an undeniably great financial decision.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to read more about saving money on food from people who are way
more insightful and experienced than I am, I&amp;rsquo;d encourage you to check out
&lt;a href=&#34;http://earlyretirementextreme.com/day-3-grocery-shopping.html&#34;&gt;this post&lt;/a&gt;
from Early Retirement Extreme on Grocery Shopping and
&lt;a href=&#34;https://www.choosefi.com/007-america-fat-broke/&#34;&gt;this podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Thoughts on Qutebrowser</title>
        <link>https://jamesbvaughan.com/qutebrowser/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/qutebrowser/</guid>
        <pubDate>
          Wed, 06 Dec 2017 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I recently began using a web browser called
&lt;a href=&#34;https://qutebrowser.org/index.html&#34;&gt;Qutebrowser&lt;/a&gt;.
I heard about it on Hacker News a while ago
and it caught my attention because it encouraged a
completely keyboard-based workflow.
I&amp;rsquo;ve been surprised at how much I&amp;rsquo;ve enjoyed using it and it may very well
become my primary web browser.
In this post, I will talk about how I got started with Qutebrowser,
what makes it unique, which of its features I love the most,
and what future features I&amp;rsquo;m most excited for.&lt;/p&gt;

&lt;h2 id=&#34;my-browser-history&#34;&gt;My Browser History&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using Google Chrome or Chromium for almost as long as I can remember.
My first introduction to the web was through Microsoft&amp;rsquo;s Internet Explorer on
my family&amp;rsquo;s shared home computer running Windows 95.
When I was in Junior High, I discovered Firefox and quickly jumped on the
anti-IE bandwagon, although at the time, I didn&amp;rsquo;t really understand &lt;em&gt;why&lt;/em&gt;
everyone hated IE.
In 8th grade, I heard about Google Chrome and became instantly infatuated with
it&amp;rsquo;s sleek look and claims of performance gains.
I continued using it throughout high school until I started running Linux and
switched to Chromium since it seemed to be more trendy in the open-source
community.&lt;/p&gt;

&lt;p&gt;Since first using Chrome/Chromium,
I&amp;rsquo;ve tried about a half dozen other browsers,
but never for more than a few days.
I&amp;rsquo;m always excited to try out new things, and with how central my web browser is
to my daily life, I&amp;rsquo;m interested in finding the most optimal one for my
personal workflow, but I never found one that could match Chromium in speed,
extensibility, reliability, and features.&lt;/p&gt;

&lt;p&gt;A feature that is important to me is support powerful and flexible custom
keybindings.
I&amp;rsquo;ve tried to move as much of my work from my mouse to my keyboard as possible,
and almost all of my time on my computer is spent either in a terminal or in a
web browser.
With Chromium + Vimium/cVim, I was able to get pretty close to
being fully keyboard based, but while Vimium and cVim are great extensions,
they are still just &lt;em&gt;extensions&lt;/em&gt;, extending a tool that was designed to be used with
a mouse.
There are a lot of essential (for me) features that they are not capable of
implementing because of Chromium&amp;rsquo;s limitations on what extensions are allowed
to do.&lt;/p&gt;

&lt;h2 id=&#34;enter-qutebrowser&#34;&gt;Enter Qutebrowser&lt;/h2&gt;

&lt;p&gt;Qutebrowser describes itself as &amp;ldquo;a keyboard-focused browser with a minimal GUI&amp;rdquo;.
It has vi-inspired modes and keybindings for interacting with both the browser
itself and the webpages that you are browsing.
It&amp;rsquo;s possible to do just about everything you ever need to do in a web browser
without touching the mouse/trackpad in Qutebrowser.
Like I mentioned, I am a huge fan of keyboard-based workflows,
so this immediately caught my attention when I first discovered Qutebrowser a
few months ago.&lt;/p&gt;

&lt;p&gt;Since trying it out for the first time, I&amp;rsquo;ve been using it almost exclusively.
There are a lot of things that I really love about Qutebrowser and
I will cover the ones that are most important to me in the following sections.&lt;/p&gt;

&lt;h4 id=&#34;the-keybindings&#34;&gt;The Keybindings&lt;/h4&gt;

&lt;p&gt;A primary focus of Qutebrowser is a completely keyboard-focused workflow.
The default keybindings are quite nice, in my opinion.
There is &lt;a href=&#34;https://qutebrowser.org/img/cheatsheet-big.png&#34;&gt;a helpful cheatsheet&lt;/a&gt;
that came in handy when I was getting started, but the most common bindings
got baked in to my muscle memory surprisingly quickly.
The defaults, many of which are taken from
&lt;a href=&#34;https://github.com/yzzyx/dwb&#34;&gt;dwb&lt;/a&gt;, start to feel natural very quickly if you
have prior experience with vi-style navigation.&lt;/p&gt;

&lt;h4 id=&#34;the-command-completion-is-indispensable&#34;&gt;The Command Completion Is Indispensable&lt;/h4&gt;

&lt;p&gt;Most interactions with Qutebrowser are done through commands entered in the
status bar.
From the status bar, you can change settings, open, close, and navigate tabs,
store and load bookmarks, spawn programs, and more.
Almost all commands have a completion feature that will feel very familiar if
you have ever used tools like dmenu or rofi.
It&amp;rsquo;s difficult to convey just how useful the completion is and how efficient it
feels to use.
With just a few keystrokes, I can open any page in my history,
list my bookmarks and open one, or look up the description of a configuration
option and change its value.&lt;/p&gt;

&lt;p&gt;Chromium has a similar feature built into it&amp;rsquo;s omnibox for opening pages,
but it can be difficult to open a specific page that you have in mind with it
and it is not nearly as flexible as the commands and completion in Qutebrowser.&lt;/p&gt;

&lt;h4 id=&#34;it-s-a-great-open-source-project&#34;&gt;It&amp;rsquo;s A Great Open Source Project&lt;/h4&gt;

&lt;p&gt;This isn&amp;rsquo;t often something that I put a lot of weight on when I am evaluating
software for personal use, but the aspects of Qutebrowser as an open-source
project that go beyond the browser itself and the community around it have made
an impression on me that I think is worth mentioning.&lt;/p&gt;

&lt;p&gt;The maintainer and open-source contributors have done an excellent job of
managing the project, compared to other open-source projects that I use.
A few things that have stood out to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qutebrowser/qutebrowser/releases&#34;&gt;Actually maintaining a thorough changelog on the GitHub releases page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Responding quickly and positively to questions from users on GitHub and IRC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qutebrowser.org/index.html&#34;&gt;Including screenshots on the project website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qutebrowser.org/doc/faq.html&#34;&gt;Listing in the FAQ the project&amp;rsquo;s advantages and disadvantages compared to alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qutebrowser/qutebrowser&#34;&gt;Covering all the basics in the project README&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keeping up-to-date documentation of &lt;a href=&#34;https://qutebrowser.org/doc/help/commands.html&#34;&gt;commands&lt;/a&gt; and &lt;a href=&#34;https://qutebrowser.org/doc/help/settings.html&#34;&gt;configuration settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these are more common than others when it comes to open-source projects,
but for me they all really add to the amount of happiness I experience when I
use Qutebrowser.&lt;/p&gt;

&lt;h4 id=&#34;it-is-great-at-rendering-websites&#34;&gt;It Is Great At Rendering Websites&lt;/h4&gt;

&lt;p&gt;This is one of the main things that a web browser is all about, isn&amp;rsquo;t it?
Qutebrowser does an excellent job of displaying websites, just as excellent
as Chromium.
In fact, it&amp;rsquo;s &lt;em&gt;exactly&lt;/em&gt; as excellent as Chromium because both Qutebrowser
and Chrome/Chromium use
&lt;a href=&#34;https://www.chromium.org/blink&#34;&gt;Google&amp;rsquo;s Blink rendering engine&lt;/a&gt;,
so websites should look identical in the two browsers.
This also means that you&amp;rsquo;ll have access to the webinspector and some of the
&lt;code&gt;chrome://&lt;/code&gt; pages that you may be used to using in Chromium.&lt;/p&gt;

&lt;h4 id=&#34;quickmarks-are-awesome&#34;&gt;Quickmarks Are Awesome&lt;/h4&gt;

&lt;p&gt;When using Chromium, a common sequence of keypresses for me was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Ctrl-t&amp;gt;f&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would bet that many of you are familiar with that sequence and know exactly
what happens when I enter it.
It opens a new tab and places keyboard focus in the omnibox,
then it highlights a URL from my history based on some algorithm that seems to
take into account the frequency and recency of my visits to that site,
and then it navigates to that site (in my case, Facebook).
This sequence has become muscle memory for me and I often don&amp;rsquo;t even think about
it when I enter it (which is an interesting/frightening phenomenon that deserves
a separate post someday).
There is a small handful of websites for which these quick sequences reliably
get me to the sites I want to get to in Chromium,
but the algorithm that it uses is a mystery to me and often results in very
different sites than what I&amp;rsquo;m looking for.&lt;/p&gt;

&lt;p&gt;Qutebrowser captures similar (and in my opinion, superior)
functionality through quickmarks.
Quickmarks are URLs that take priority over all other URLs in your history
when completing URLs with the &lt;code&gt;open&lt;/code&gt; command.
They are identified by strings that you as a user set explicitly.
For example, I have the string &lt;code&gt;fb&lt;/code&gt; to identify &lt;code&gt;https://facebook.com&lt;/code&gt;.
This means that I can type &lt;code&gt;ohn&amp;lt;Enter&amp;gt;&lt;/code&gt;
to open up Hacker News, or &lt;code&gt;Ofb&amp;lt;Enter&amp;gt;&lt;/code&gt;
to open Facebook in a new tab.
After using quickmarks for over a month now, I find them even more convenient
than Chromium&amp;rsquo;s omnibox completions, because I like using &lt;code&gt;o&lt;/code&gt; and &lt;code&gt;O&lt;/code&gt; more than
&lt;code&gt;&amp;lt;Ctrl-l&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Ctrl-t&amp;gt;&lt;/code&gt; and also because I have full control over the
quickmarks that are set.&lt;/p&gt;

&lt;h2 id=&#34;potential-improvements&#34;&gt;Potential Improvements&lt;/h2&gt;

&lt;p&gt;I am using Qutebrowser as my primary web browser now,
and I really do like it a lot more than Chromium,
but it&amp;rsquo;s not quite perfect yet
and there are a few specific things that I miss from Chromium.&lt;/p&gt;

&lt;h4 id=&#34;form-autocomplete&#34;&gt;Form Autocomplete&lt;/h4&gt;

&lt;p&gt;One feature of Chromium that I took for granted while I was using it is
autocompletion in forms.
In Chromium, I rarely had to manually type my whole address, email address,
phone number, name, or even my credit card number,
because I have given Google all of that information
and the browser would autocomplete the form I was editing with it.
Qutebrowser currently does not autocomplete forms.&lt;/p&gt;

&lt;p&gt;To be clear,
I don&amp;rsquo;t think that Qutebrowser should make use of a centralized place in the
cloud that contains all of my private info,
but it would be cool if it implemented a way to store all of that info locally
on my machine for form autocompletion.
This hasn&amp;rsquo;t been a big issue, but it would be a nice convenience to have.&lt;/p&gt;

&lt;h4 id=&#34;built-in-password-manager-with-autofill&#34;&gt;Built-in Password Manager With Autofill&lt;/h4&gt;

&lt;p&gt;This is related to the autocomplete issue,
but I really miss having my passwords saved and autofilled on websites that
I have to log in to frequently.
This is a commonly requested feature and you can find discussion of it
&lt;a href=&#34;https://github.com/qutebrowser/qutebrowser/issues/180&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;edit: There are &lt;a href=&#34;https://github.com/qutebrowser/qutebrowser/tree/master/misc/userscripts&#34;&gt;some userscripts&lt;/a&gt;
included with the Qutebrowser source code that
add integration with &lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt;.
When I first wrote this post,
I was under the impression that these were not recommended for actual use,
but a reader pointed out that they are safe as long as you don&amp;rsquo;t have debug
logging enabled and accidentally share your logs (which will include your
entered passwords in plain text.)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;notifications&#34;&gt;Notifications&lt;/h4&gt;

&lt;p&gt;Web notifications seem to be a bit of a controversial topic among some people,
but I really like them.
Qutebrowser (with QtWebEngine) does not support notifications yet.&lt;/p&gt;

&lt;h4 id=&#34;pdf-reader&#34;&gt;PDF Reader&lt;/h4&gt;

&lt;p&gt;Ever since I started using Chromium,
I had been using it as a PDF reader as well as a web browser.
It was super convenient to be able to click a link to a PDF and have it open up
in a new tab, just like a website.
Qutebrowser doesn&amp;rsquo;t have a built in PDF reader.
&lt;a href=&#34;https://mozilla.github.io/pdf.js/&#34;&gt;PDF.js&lt;/a&gt; works well in it,
but with QtWebEngine, downloaded PDFs can&amp;rsquo;t be opened automatically.
I believe that this is being actively worked on,
and &lt;a href=&#34;https://github.com/qutebrowser/qutebrowser/issues/2330&#34;&gt;it should be solved soon&lt;/a&gt;,
but for the time being it is a bit of an inconvenience.
For now, I&amp;rsquo;ve ben going back and forth between using PDF.js in Qutebrowser,
and using &lt;a href=&#34;https://pwmt.org/projects/zathura/&#34;&gt;zathura&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;edit: Since posting this, I&amp;rsquo;ve settled on a PDF viewing workflow that I
actually much prefer to having a reader built into my web browser.
I made a rofi script that lets me quickly search through all the PDFs in my
home directory and sub-directories and open one in zathura.
You can check it out &lt;a href=&#34;https://github.com/jamesbvaughan/dotfiles/blob/master/scripts/pdf-opener.sh&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;cloud-sync&#34;&gt;Cloud Sync&lt;/h4&gt;

&lt;p&gt;In Chromium, I have the option to give Google all of my settings, my theme,
my bookmarks, and my saved passwords and have them all synchronized
across all my devices.
Qutebrowser doesn&amp;rsquo;t have a cloud sync feature like that, but it does use a
configuration file that I now include in my dotfiles git repository.
This gets the job done (and is actually preferable for me) when it comes to
keeping configuration in sync between machines, but version controlling my
quickmarks and bookmarks and trying to keep them in sync between machines is
a bit less convenient.
I&amp;rsquo;d like to point out and emphasize that this isn&amp;rsquo;t a feature that I think
Qutebrowser needs to add, especially since a feature like this would directly
counter the philosophy of many of its users.
I only mention it here to inform newcomers who aren&amp;rsquo;t familiar with Qutebrowser,
since it is certainly something that new users who are coming from browsers
that automatically kept configurations synchronized might miss.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I had been feeling a desire to detach myself from dependence on the Google
ecosystem for a while, but didn&amp;rsquo;t think I could actually ever do it because
the convenience of Google products had always been too great for me to switch to
anything else.
The fact that I genuinely prefer Qutebrowser to Chromium is a huge surprise for
me and has sparked a transition away from other Google products as well.
(Drive/Photos -&amp;gt; Nextcloud, Google Search -&amp;gt; DuckDuckGo, etc.)
So far I haven&amp;rsquo;t committed to those others as fully as I have with Qutebrowser,
but it has been fun exploring some of the other options that are out there.&lt;/p&gt;

&lt;p&gt;I know that I focused my comparisons on Chromium throughout this post, and that
is because it is what I am most familiar with, but I don&amp;rsquo;t expect that my
opinions would change too much if I were comparing Firefox/Safari/Edge/etc to
Qutebrowser instead of Chromium.
(The &lt;a href=&#34;https://qutebrowser.org/doc/faq.html&#34;&gt;FAQ&lt;/a&gt; has nice explanations of some
reasons to choose Qutebrowser over others.)&lt;/p&gt;

&lt;p&gt;I hope that this post was helpful for anyone looking to learn more about
Qutebrowser.
If you found any of this intriguing, you should install it and give it a try!&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Finding Free Food with Python</title>
        <link>https://jamesbvaughan.com/python-twilio-scraping/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/python-twilio-scraping/</guid>
        <pubDate>
          Mon, 06 Mar 2017 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;If you live in a major city, there&amp;rsquo;s a good chance you&amp;rsquo;ve used
(or at least heard of) food delivery services like Postmates,
GrubHub, or DoorDash.
These services are great for times when I&amp;rsquo;m behind on groceries
or when I&amp;rsquo;m getting some late night studying in before a big
midterm or final.
The only problem with these is that they&amp;rsquo;re not cheap.
For a single order, the delivery fee and service fee can
sometimes double the cost of the order.&lt;/p&gt;

&lt;p&gt;Fortunately for me, Postmates regularly does promotions where
they offer free food and waive the delivery fee for certain restaurants.
The only problem with these promotions is that they&amp;rsquo;re easy to
miss.
I generally rely on waiting for a friend to catch one of these
promotions by chance and text me about it.
I actually have a group message with some friends titled
&amp;ldquo;Free Postmates&amp;rdquo; that we exclusively use for keeping track of
Postmates promotions.&lt;/p&gt;

&lt;p&gt;I recently realized that I could make this process much simpler
by creating something that would track the Postmates website
and notify me of deals.
In this post, I&amp;rsquo;ll describe how I built a tool to do this.
It turned out to be a lot simpler than I had expected and has
made me a lot more confident to create things like this in the
future.
If you&amp;rsquo;re new to the tools I use in this post,
I hope that reading it helps you feel comfortable getting started
with them!&lt;/p&gt;

&lt;h3 id=&#34;choosing-a-language&#34;&gt;Choosing a Language&lt;/h3&gt;

&lt;p&gt;For something like this, the language choice isn&amp;rsquo;t super critical.
My only requirements were that it be a language that is simple
for me to use, and has nice libraries for doing the things
I need to do (web scraping and notifying my phone).
This helped me narrow it down to Javascript and Python.
There are plenty of other great choices for something like this,
but those are the two that I knew I could work efficiently in,
based on my past experience.
I ended up choosing Python, mostly because I had slightly less experience
with it and wanted to learn more.&lt;/p&gt;

&lt;h3 id=&#34;choosing-a-web-scraper&#34;&gt;Choosing a Web Scraper&lt;/h3&gt;

&lt;p&gt;This was a fairly easy decision as I had used
&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/&#34;&gt;Beautiful Soup&lt;/a&gt;
for web scraping in Python before and had a good experience with
it.
Beautiful Soup isn&amp;rsquo;t the only option here,
(another good one is
&lt;a href=&#34;https://scrapy.org/&#34;&gt;Scrapy&lt;/a&gt;),
but it&amp;rsquo;s the one I knew how to use and I knew that it would
make things simple so I went with it.&lt;/p&gt;

&lt;h3 id=&#34;choosing-a-notifier&#34;&gt;Choosing a Notifier&lt;/h3&gt;

&lt;p&gt;The final thing I needed to decide on for this project was some
way to notify myself when a promotion was found.
I had been wanting to use
&lt;a href=&#34;https://twilio.com&#34;&gt;Twilio&lt;/a&gt;
for something for a while, so I decided to go with that.
In case you haven&amp;rsquo;t heard of Twilio, it&amp;rsquo;s a service that provides
a way to integrate different kinds of messaging into your
program.
One of it&amp;rsquo;s most popular features allows you to send and receive
SMS messages.
This seemed like a nice method since it wouldn&amp;rsquo;t require anything
special on my phone.&lt;/p&gt;

&lt;h2 id=&#34;first-steps&#34;&gt;First Steps&lt;/h2&gt;

&lt;p&gt;When I&amp;rsquo;m working on something new like this,
I like to start with the most basic steps and work my way up
from there.
For this project, that meant writing two separate super simple
scripts: one that fetches the web page to scrape and just
prints the whole thing, and one that sends a &amp;ldquo;Hello World&amp;rdquo;
SMS to my phone.&lt;/p&gt;

&lt;p&gt;After brushing up on the Beautiful Soup API, I came up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;bs4&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://postmates.com/los-angeles&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;webpage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;webpage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not too impressive yet, but it&amp;rsquo;s always good to see something
working before things get too complicated.&lt;/p&gt;

&lt;p&gt;Now that I had the webpage,
I wanted to get up and running with a basic &amp;ldquo;Hello World&amp;rdquo; through
Twilio.
They have a great Getting Started guide in their docs and
it didn&amp;rsquo;t take long before I had received my first text from my
free Twilio phone number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;twilio.rest&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwilioRestClient&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;account_sid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;auth_token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;twilio_phone_number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;+15558675309&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_phone_number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;+15551234567&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwilioRestClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account_sid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auth_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;from_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;twilio_phone_number&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After signing up for a free Twilio account and finding my
account token, auth token, and registering a Twilio phone number,
this worked like a charm!&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all Together&lt;/h2&gt;

&lt;p&gt;Now that I had the basic pieces working, I just had to find a
way to extract the promotions from the web page and connect it all
up!&lt;/p&gt;

&lt;p&gt;Fortunately for me, this turned out to be fairly simple as well.
After browsing the source for the front page of Postmates in my
developer console, I found out that whenever there is a free
promotion, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing the restaurant&amp;rsquo;s title
also contained the word &amp;ldquo;Free&amp;rdquo;.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
This meant that all I needed to do was find the elements
containing the string &amp;ldquo;Free&amp;rdquo; and send their inner text to my phone!
This is what I ended up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;bs4&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;twilio.rest&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwilioRestClient&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://postmates.com/los-angeles&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;account_sid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;auth_token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;twilio_phone_number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;+15558675309&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;my_phone_number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;+15551234567&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;webpage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;webpage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;free_food&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;soup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stripped_strings&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;free&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;free_food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Free Postmates!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;free_food&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwilioRestClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account_sid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auth_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;from_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;twilio_phone_number&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s it! The only thing left to do was to make this script
run regularly enough to catch all the deals.
This is the kind of thing that Cron is perfect for,
but I had been reading a bit about Systemd Timers and how they
can be used as an alternative to Cron jobs, so I chose to go
with those.
I won&amp;rsquo;t go into the details of setting up a Systemd Timer in this
post, but I have some slides on it that provide a quick introduction
in &lt;a href=&#34;https://jamesbvaughan.com/systemd-timers&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading this! I hope it helped provide insight into
the way I approach creating something like this, and maybe even
inspired you to make something similar.
Feel free to comment if you have any questions about it, or if you
notice anything that I could have done better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; Since a few people have asked about this, I should point out that
this script does end up sending the same text a lot if you have it running
frequently. This was pretty annoying at first, so I ended up adding a way for
it to log the current deals. I omitted it from this post for the sake of
simplicity, but you can see the actual script that I am using
&lt;a href=&#34;https://gist.github.com/jamesbvaughan/4c501fc99acb75852756a4d1dfc8ca3d&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;em&gt;This has been the case with every free promotion I&amp;rsquo;ve seen so far, but it&amp;rsquo;s very possible that I&amp;rsquo;ve missed some if they follow a different format.&lt;/em&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>Systemd Timers as a Cron Alternative</title>
        <link>https://jamesbvaughan.com/systemd-timers/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/systemd-timers/</guid>
        <pubDate>
          Wed, 01 Mar 2017 00:00:00 +0000
        </pubDate>
        <description>&lt;p&gt;I recently gave a short talk at the UCLA Linux User Group
about Systemd Timers and how they can be used as an alternative
to Cron jobs.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in a quick introduction to Systemd Timers,
please take a look at
&lt;a href=&#34;https://jamesbvaughan.github.io/systemd-timers-presentation&#34;&gt;the slides&lt;/a&gt;
or
&lt;a href=&#34;https://jamesbvaughan.com/systemd-timers.pdf&#34; target=&#34;_blank&#34;&gt;
download the PDF&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Writing an HTTP server in Prolog</title>
        <link>https://jamesbvaughan.com/prolog-http-server/</link>
        <author>james@jamesbvaughan.com (James Vaughan)</author>
        <guid>https://jamesbvaughan.com/prolog-http-server/</guid>
        <pubDate>
          Fri, 11 Nov 2016 00:00:00 +0000
        </pubDate>
        <description>

&lt;p&gt;I&amp;rsquo;m taking a class now on programming languages where I&amp;rsquo;m learning all about
the different styles of languages and how they can all be useful, as well as a
class on computer networks where I&amp;rsquo;m learning all about how the internet works
and how computers communicate with each other across networks. I had the idea
last week to try to combine what I&amp;rsquo;m learning in the two classes and implement
one of my networking assignments with the new languages I&amp;rsquo;m learning in my
programming languages class, Prolog. In this post I&amp;rsquo;ll talk about why I chose
to do this, how I did it, some of the problems I ran into along the way, and
what I learned through the process.&lt;/p&gt;

&lt;p&gt;For the past couple weeks in the
programming languages class we&amp;rsquo;ve been focusing on logic programming and
Prolog. In case you haven&amp;rsquo;t heard of logic programming (I hadn&amp;rsquo;t), it&amp;rsquo;s a kind
of programming that encourages a totally different way to think about writing
programs and solving problems than what most programmers today are used to. The
language we are using to learn about logic programming, Prolog, is built on two
pretty basic kinds of statements: facts and rules. A fact is something that&amp;rsquo;s
always true, and a rule is something that is true if a set of conditions (which
are just more facts and rules) are all true. The basic way you use Prolog is by
giving it some facts and rules and then asking it questions. This seemed so
strange and different to me at first that I couldn&amp;rsquo;t imagine Prolog ever being
a practical choice for a project.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to go too far into how Prolog works, partly because that&amp;rsquo;s not
what this post is about, and partly because Bernardo Pires has
&lt;a href=&#34;https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/&#34;&gt;a great blog post&lt;/a&gt;
that gives a nice introduction to the language.&lt;/p&gt;

&lt;p&gt;In my networking class
I&amp;rsquo;ve studied all kinds of networks and protocols in it and it&amp;rsquo;s been really
cool to actually start understanding how all of our devices communicate
efficiently with each other. My last assignment was to write a simple HTTP
server in C++, something that would have sounded crazy to me a year ago, but
it&amp;rsquo;s actually not nearly as complicated as I thought it would be!&lt;/p&gt;

&lt;h2 id=&#34;meet-sockets&#34;&gt;Meet Sockets&lt;/h2&gt;

&lt;p&gt;The bulk of the server centered around just a few functions
that are part of the Berkeley sockets API: &lt;code&gt;socket()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;listen()&lt;/code&gt;,
and &lt;code&gt;accept()&lt;/code&gt;. (There are more but these are the main four that were relevant
to this simple server.) Julia Evans has
&lt;a href=&#34;https://twitter.com/b0rk/status/797235796399058944&#34;&gt;some pretty cool illustrations&lt;/a&gt;
on this kind of stuff that you should check out. What&amp;rsquo;s awesome is that these
functions are actually fairly simple to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;socket()&lt;/code&gt; creates and gives you a new socket, which is a thing that your OS
uses to communicate with other computers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind()&lt;/code&gt; gives your socket an address that&amp;rsquo;s somewhat analogous to a street
address; it gives other computers a place to connect to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listen()&lt;/code&gt; tells your OS to start listening for things that want to connect
to your socket.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;accept()&lt;/code&gt; accepts a connection on your socket and gives you a new socket
that you can use to communicate with whatever connected to your original
socket. This is often a web browser like Chrome/Firefox/Safari, some other HTTP
client, or really any kind of program that needs to communicate with other
programs over a network.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See, there&amp;rsquo;s not that much to it! Once you&amp;rsquo;ve
got a connection established to another computer through a socket, you can
pretty much treat that socket just like a file and use the &lt;code&gt;read()&lt;/code&gt; and
&lt;code&gt;write()&lt;/code&gt; system calls to communicate.  Pretty cool, right? What&amp;rsquo;s even cooler
is that these functions exist and work pretty much the same way in a bunch of
different languages, even Prolog!&lt;/p&gt;

&lt;p&gt;At the same time that I was working on
the HTTP server for my networking class, I was working on a Prolog project for
my programming languages class and stumbled across these same socket
programming functions (well, predicates in Prolog, not functions) in the GNU
Prolog documentation.  This got me pretty excited because I actually knew what
they were! By this time, I was actually starting to warm up to Prolog, so after
I finished the two assignments, I decided that it would be fun to try to
combine them and write my own simple HTTP server in Prolog.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The first step was to decide how much functionality I wanted
this server to have.  Should it thoroughly implement HTTP/1.1?  Should it do
nothing but send a few bytes to every client that connects to it?&lt;/p&gt;

&lt;p&gt;Because I didn&amp;rsquo;t want to spend more than a couple of days on this project,
but still wanted it to make it somewhat complete, I decided on something in
between: It would be able to accept a connection from a client, read in and
parse an HTTP request, find the requested file, construct a valid HTTP
response, send it back to the client, and close the connection.&lt;/p&gt;

&lt;h3 id=&#34;requests-and-responses&#34;&gt;Requests and Responses&lt;/h3&gt;

&lt;p&gt;The first thing I chose to implement was
a set of rules for parsing HTTP requests and constructing HTTP responses, which
are both essentially just strings with information about what&amp;rsquo;s being sent from
one program to another. I tried to make these rules as simple as possible and
do the bare minimum amount of work to do what I needed. For the requests, that
meant doing nothing but extracting the path to the requested file so that we
know what to send back to the client.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/jamesbvaughan/8dc874ae215be79649d4d9c1c00dcfa5.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This code may look strange at first, but what&amp;rsquo;s going on is very simple.
Basically, it&amp;rsquo;s saying &lt;code&gt;parse_request(Request, Path)&lt;/code&gt; is true if &lt;code&gt;Path&lt;/code&gt; is the
path requested in &lt;code&gt;Request&lt;/code&gt;. The first line of an HTTP request is in the format
&amp;ldquo;GET /path/to/some/file.html HTTP/1.1&amp;rdquo;, (where &amp;ldquo;1.1&amp;rdquo; is whatever HTTP version
is being used) so &lt;code&gt;parse_request&lt;/code&gt; is just saying that &lt;code&gt;Path&lt;/code&gt; is the bit of the
request that comes after &amp;ldquo;GET /&amp;rdquo; and before &amp;ldquo; HTTP/&amp;rdquo;. Pretty simple, right? Now
on to the responses.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/jamesbvaughan/a1614d08b6a2bc8c5a3e28377737fa45.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here, you can see &lt;code&gt;construct_response(Body, Response)&lt;/code&gt; putting together an
HTTP response by concatenating the status line, &amp;ldquo;HTTP/1.0 200 OK\r\n&amp;rdquo;, one
header, and the given body of the response into &lt;code&gt;Response&lt;/code&gt;. For this simple
server, we&amp;rsquo;re only implementing one response status code, 200, but there are
tons of other ones for indicating all kinds of things. If I were to add support
for more status codes, this is where I&amp;rsquo;d do it.&lt;/p&gt;

&lt;h3 id=&#34;reading-files-and-requests-in-prolog&#34;&gt;Reading Files (and Requests) in Prolog&lt;/h3&gt;

&lt;p&gt;The next thing I needed to learn about was
reading files in Prolog. I&amp;rsquo;ve done this in other languages before, so I had a
basic idea of what needed to happen, but wasn&amp;rsquo;t sure if it would work the same
way in Prolog. To find out, I went to the list of built-in predicates in GNU
Prolog and Ctrl-F&amp;rsquo;d for &amp;ldquo;open&amp;rdquo;. I was happy to find a built-in &lt;code&gt;open()&lt;/code&gt;
predicate that works just like the Unix system call by the same name. The
tricky part was reading in the contents of the file. Like in functional
programming languages, the concept of a loop just doesn&amp;rsquo;t make sense in Prolog,
so I knew that there would need to be some recursion involved here and
eventually arrived at this code for reading the contents of the file:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/jamesbvaughan/f3ae93449fed11320036240a6ca07ecd.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;After &lt;code&gt;read_file&lt;/code&gt; opens the file at &lt;code&gt;Path&lt;/code&gt;, it jumps into the recursive rule
&lt;code&gt;read_file_helper&lt;/code&gt;, which continually reads in and concatenates bytes to the
file contents until it reaches the end of the file. I recalled from my
networking class that socket I/O is very similar to file I/O in most languages,
and was happy to learn that Prolog is no exception.  My rule for reading in
HTTP requests from the client is almost identical to my rule for reading files,
except that HTTP requests end in two carriage-return line-feeds, rather than an
end-of-file.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/jamesbvaughan/7e78b2d674e6e6ba9751af4144eb876b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I&amp;rsquo;m using two new ideas here in &lt;code&gt;read_request&lt;/code&gt;. The first is naming my
request reading rule and its recursive helper the same thing. I&amp;rsquo;m allowed to do
this here because the two have different arity. They are conventionally
referred to as &amp;ldquo;read_request/2&amp;rdquo; and &amp;ldquo;read_request/3&amp;rdquo;, respectively. The second
thing is the underscore in place the &lt;code&gt;Stream&lt;/code&gt; variable and the request prefix
in the second definition.  The underscore here says that I don&amp;rsquo;t care what is
in those places. I don&amp;rsquo;t need to use the socket stream here and I don&amp;rsquo;t care
what comes before the carriage-return line-feeds in the request, so they&amp;rsquo;re
replaced with underscores.  Note that the underscore has a special meaning in
Prolog because it doesn&amp;rsquo;t require that they are equivalent.&lt;/p&gt;

&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;With these helpers defined I was able to start on the
main rule for running the server. This is where we get to use those standard
socket interfaces I mentioned earlier.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/jamesbvaughan/87c1732213d894def8ad3aa4e972e094.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;In the first three lines here we&amp;rsquo;re creating a new socket and binding it to
&lt;code&gt;localhost:3000&lt;/code&gt;. Then it starts listening at that address and lets the user
know. I added the &lt;code&gt;flush_output&lt;/code&gt; line because I was having some problems with
the message not being written right away. Next, &lt;code&gt;socket_accept&lt;/code&gt; waits for a
client to connect and creates input and output streams that let us read from
and write to the client connected at that socket. After that my helper rules
read and parse the request and then get the requested file and construct an
HTTP response to be sent to the client. Once all of that is finished, the
socket is closed.&lt;/p&gt;

&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;

&lt;p&gt;For the most part, this was a
generally frustration-free project, but there were a few challenging points
that slowed me down along the way.&lt;/p&gt;

&lt;p&gt;The main problem I ran into was that
while testing the server, I would often get an error when I tried to run it,
saying that the address was already in use. This confused me for a while
because I wasn&amp;rsquo;t getting it consistently, and I knew I wasn&amp;rsquo;t running any other
servers on my machine on that port. After a bit of digging, I found an option
that&amp;rsquo;s available in most implementations of socket interfaces that tells the OS
to let other processes re-use the requested address. This option wasn&amp;rsquo;t being
set when I called &lt;code&gt;socket_bind&lt;/code&gt;, and the GNU Prolog documentation didn&amp;rsquo;t seem
to indicate a way to do so.&lt;/p&gt;

&lt;p&gt;To the source code! The next logical step,
after Googling the problem without much success, was to go to the GNU Prolog
source code and see how &lt;code&gt;socket_bind&lt;/code&gt; was implemented and maybe find an
undocumented way to set that address reuse flag. To my surprise, I found that
it &lt;em&gt;was&lt;/em&gt; being set, right there in the source code where I could see it.
But if it was being set, then where was my problem coming from? I quickly
learned that the address reuse flag was a relatively recent addition to the GNU
Prolog source and hasn&amp;rsquo;t yet been included in a stable release. This was a
bummer for me, but I was happy to have gotten to the root of the problem.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it! A super basic HTTP server in Prolog. It
doesn&amp;rsquo;t fully implement HTTP 1.0 or even support multiple connections, and It&amp;rsquo;s
certainly not going to replace any of the servers that I use for my projects
any time soon, but it was a lot of fun to write and I feel like I have a better
understanding of socket programming and Prolog after writing it.&lt;/p&gt;

&lt;p&gt;This
address reuse flag problem was a bummer, but it felt really cool to figure out
the reason for the issue by digging into the language&amp;rsquo;s source. If I were to
redo this project, I would use SWI Prolog, which seems to be more actively
maintained and has a socket interface that gives users that option to set that
address reuse flag.&lt;/p&gt;

&lt;p&gt;This post was partly inspired by a lot of
&lt;a href=&#34;https://jvns.ca/&#34;&gt;Julia Evans&lt;/a&gt;&amp;lsquo;
recent posts, which are all super cool
and you should check them out. You can read
&lt;a href=&#34;https://github.com/jamesbvaughan/httppl&#34;&gt;the full source code on Github&lt;/a&gt;.
I&amp;rsquo;m still very new to both socket programming and to Prolog, so
feel free to let me know if there&amp;rsquo;s anything I could have done differently!&lt;/p&gt;
</description>
      </item>
    
  </channel>
</rss>
